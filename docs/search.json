[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Lifeng Ren",
    "section": "",
    "text": "This is personal website for Lifeng Ren, the website is under construction."
  },
  {
    "objectID": "ideas.html",
    "href": "ideas.html",
    "title": "Brainstorming Ideas",
    "section": "",
    "text": "As mentioned in the meeting, we will set up another meeting (off-schedule) to dive further into the ideas we settled on. Each idea was assigned to someone who will distribute the 1 page proposal prior to our next meeting for comments/suggestions. Then at the next session we will do a brainstorming break-out exercise to settle on (1) which ideas to pursue, (2) what the structure of the project looks like, and (3) assign division of work.\nThe topics were assigned to: Nfamara: Nature based solutions for cooling Steve: Global differences in ecosystem value under different reforms and different scenarios Adriana: Water quality, access, and poverty in the USA Saleh: Coastal erosion, housing, and nature-based solutions to natural disasters. Below are notes on the topics from our meeting that were written on the board.\nNfamara: Nature based solutions for cooling Developed vs developing settings biodiversity as cooling in urban areas Saving and energy costs for wealthy vs. health costs for poor. Similar to work by world bank in India Nature based solutions (Invest) to consider ecological relationships before application of policies Steve: Global differences in ecosystem value under different reforms and different scenarios Similar to Invest-GTAP. Fits in NatCap portfolio Evaluate GDP and GEP Economic analysis of ecosystem services and distribution Benefit is can produce many side projects Adriana: Water quality, access, and poverty in the USA Safe water act and the quality of water Replacement of lead pipes and addressing forever chemicals (PFAS) Inequality in use of recreational water (swimming, lakes, etc.) Saleh: Coastal erosion, housing, and nature-based solutions to natural disasters. Water rise and vulnerability of housing Previous work had issues with DEM and mapping this to housing Similar to work done at UC Santa Cruz What is odd is that prices are rising in coastal areas vulnerable to consistent natural disasters. Why take the risky investments? Potentially a way of seeing how individuals rationalize risk when a loss is inevitable (p/m a couple of years). Perhaps willingness to relocate/migrate is determined by loss of property value’s future growth (wealthy) or limited resources to move (poor) The scarcity of coastal housing due to continued natural disasters may increase the NPV (risk makes it MORE valuable) Could be analyzed in similar fashion as hedonic models or willingness to pay. Perhaps there are nature-based solutions to coastal erosion (mangroves) that can help with opportunity cost."
  },
  {
    "objectID": "skills.html",
    "href": "skills.html",
    "title": "Skill Sessions",
    "section": "",
    "text": "Presenter: Lifeng Ren\nHere is the link to the Recordings\nHere is the link to the Materials"
  },
  {
    "objectID": "skills.html#gtap-followup-and-intro-to-quarto-2023-07-17",
    "href": "skills.html#gtap-followup-and-intro-to-quarto-2023-07-17",
    "title": "Skill Sessions",
    "section": "GTAP Followup and Intro to Quarto (2023-07-17)",
    "text": "GTAP Followup and Intro to Quarto (2023-07-17)\n\nPresenter: Lifeng Ren\nHere is the link to the Recordings\nHere is the link to the Materials"
  },
  {
    "objectID": "events.html",
    "href": "events.html",
    "title": "Lab Meetings",
    "section": "",
    "text": "Session Type\nDate\nSession Leader\nTopic\n\n\n\n\nRegular Lab Meeting\n2023-06-12\nLifeng\nMitigation Expenditure and Extreme Wildfire Smoke Exposure in California\n\n\nSkill Session\n2023-06-26\nLifeng\nGTAP\n\n\nRegular Lab Meeting\n2023-07-10\nLibby\nAccounting for environmental justice and equity within Natural Capital Accounts\n\n\nSkill Session\n2023-07-17\nLifeng\nGTAP pt. 2\n\n\nRegular Lab Meeting\n2023-07-24\nRyan\nLab Research Brainstorming Session\n\n\nSkill Session\n2023-07-31\nLibby\nInVEST/raster data prep\n\n\nRegular Lab Meeting\n2023-08-07\nLingling\nNASA EEJ\n\n\nSkill Session\n2023-08-14\nNfamara\nRemote sensing methods and techniques\n\n\nRegular Lab Meeting\n2023-08-21\nYanxu\nTBD\n\n\nSkill Session\n2023-08-28\nSaleh\nSemantic segmentation for satellite imagery\n\n\n\nNotes:\n\nLab sessions are held biweekly, every other Monday at 12:00pm in Ruttan 119.\nLab session for 2023-07-31 would be held in Ruttan 230.\nWe might need to find an additional time for the brainstorming session."
  },
  {
    "objectID": "resource.html",
    "href": "resource.html",
    "title": "Public Resources",
    "section": "",
    "text": "Presenter: Lifeng Ren\nRecordings\nMaterials: [Slides_Option_GoogleDrive], [Data]\n\n\n\n\n\nPresenter: Lifeng Ren\nHere is the link to the Recordings\nHere is the link to the Materials: [Slides], [Code], [Data]"
  },
  {
    "objectID": "resource.html#regular-sessions",
    "href": "resource.html#regular-sessions",
    "title": "Public Resources",
    "section": "Regular Sessions",
    "text": "Regular Sessions"
  },
  {
    "objectID": "resource.html#brainstorming-sessions",
    "href": "resource.html#brainstorming-sessions",
    "title": "Public Resources",
    "section": "Brainstorming Sessions",
    "text": "Brainstorming Sessions"
  },
  {
    "objectID": "teaching.html",
    "href": "teaching.html",
    "title": "Teaching",
    "section": "",
    "text": "R Review Class for 2023 incoming PhD student"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "Lifeng is a Ph.D. student in the Department of Applied Economics at the University of Minnesota. His research interests involve using computational methods to study environmental and natural resources economics and the impact of climate changes on both global and local scales.\nLifeng holds an M.S. in Applied Mathematics and Agricultural and Resource Economics from UC Davis. He received his B.S. in Mathematics and Agricultural Economics from Purdue University."
  },
  {
    "objectID": "lec1.html",
    "href": "lec1.html",
    "title": "Lecture 1: R-Review-2023",
    "section": "",
    "text": "In this section, we are going to learn:\n\nBasic data types in R\nMatrix/Linear Algebra calculation in R\nBasic data structures in R\nBasic data access and results print"
  },
  {
    "objectID": "lec1.html#in-class-exercise-data-type",
    "href": "lec1.html#in-class-exercise-data-type",
    "title": "Lecture 1: R-Review-2023",
    "section": "In-Class Exercise: Data Type",
    "text": "In-Class Exercise: Data Type\nUse class(), length() and is.XXX() to examine the data types\n\nCopy the following code and run them in the R script->Data Type Section.\n\n\n# For 5.2\nprint(paste(\"Class of 5.2:\", class(5.2)))\nprint(paste(\"Length of 5.2:\", length(5.2)))\nprint(paste(\"Is it a numeric? \", is.numeric(5.2)))\n\n# For 3L\nprint(paste(\"Class of 3L:\", class(3L)))\nprint(paste(\"Length of 3L:\", length(3L)))\nprint(paste(\"Is it an integer? \", is.integer(3L)))\n\n# For \"Hello, R!\"\nprint(paste(\"Class of 'Hello, R!':\", class(\"Hello, R!\")))\nprint(paste(\"Length of 'Hello, R!':\", length(\"Hello, R!\")))\nprint(paste(\"Is it a character? \", is.character(\"Hello, R!\")))\n\n# For TRUE\nprint(paste(\"Class of TRUE:\", class(TRUE)))\nprint(paste(\"Length of TRUE:\", length(TRUE)))\nprint(paste(\"Is it a logical? \", is.logical(TRUE)))\n\n# For FALSE\nprint(paste(\"Class of FALSE:\", class(FALSE)))\nprint(paste(\"Length of FALSE:\", length(FALSE)))\nprint(paste(\"Is it a logical? \", is.logical(FALSE)))\n\n# For 2L\nprint(paste(\"Class of 2L:\", class(2L)))\nprint(paste(\"Length of 2L:\", length(2L)))\nprint(paste(\"Is it an integer? \", is.integer(2L)))\n\n# For 100L\nprint(paste(\"Class of 100L:\", class(100L)))\nprint(paste(\"Length of 100L:\", length(100L)))\nprint(paste(\"Is it an integer? \", is.integer(100L)))\n\n# For 3 + 2i\nprint(paste(\"Class of 3 + 2i:\", class(3 + 2i)))\nprint(paste(\"Length of 3 + 2i:\", length(3 + 2i)))\nprint(paste(\"Is it a complex? \", is.complex(3 + 2i)))\n\n# For charToRaw(\"Hello\")\nraw_value <- charToRaw(\"Hello\")\nprint(paste(\"Class of charToRaw('Hello'):\", class(raw_value)))\nprint(paste(\"Length of charToRaw('Hello'):\", length(raw_value)))\nprint(paste(\"Is it raw? \", is.raw(raw_value)))\n\n# For factor(c(\"low\", \"high\", \"medium\"))\nfactor_value <- factor(c(\"low\", \"high\", \"medium\"))\nprint(paste(\"Class of the factor:\", class(factor_value)))\nprint(paste(\"Length of the factor:\", length(factor_value)))\nprint(paste(\"Is it a factor? \", is.factor(factor_value)))"
  },
  {
    "objectID": "lec1.html#access-to-the-value",
    "href": "lec1.html#access-to-the-value",
    "title": "Lecture 1: R-Review-2023",
    "section": "Access to the value",
    "text": "Access to the value\n\n\n\n\n\n\n\n\n\nData Structure\nDescription\nExample\nResult Description\n\n\n\n\nVector\nAccessing values by index\nv <- c(10, 20, 30, 40); v[2]\nGets the second element: 20\n\n\nMatrix\nAccessing rows and columns using indices\nm <- matrix(1:4, 2, 2); m[1,2]\nGets the value in the 1st row, 2nd column: 3\n\n\nData Frame\nAccessing columns by name and rows by index\ndf <- data.frame(x=1:3, y=4:6); df$x\nGets the x column: 1, 2, 3\n\n\n\n\ndf[1, ]\nGets the first row as a data frame\n\n\nList\nAccessing elements by index or name\nlst <- list(a=1, b=2, c=3); lst$a\nGets the a element: 1\n\n\n\n\nlst[[2]]\nGets the second element: 2\n\n\nArray\nAccessing elements using indices in each dimension\narr <- array(1:8, dim=c(2,2,2)); arr[1,2,2]\nAccessing value in the given indices\n\n\nFactor\nAccessing levels and values\nf <- factor(c(\"low\", \"high\", \"medium\")); levels(f)\nGets the levels of the factor"
  },
  {
    "objectID": "lec1.html#vectors",
    "href": "lec1.html#vectors",
    "title": "Lecture 1: R-Review-2023",
    "section": "Vectors",
    "text": "Vectors\n\nExercise: Vectors\n\nPart (a) is for in-class use. Part (b) and Challenge Task are for your own practice at home.\nPlease do the exercise first and then check the solution.\n\n\n\nProblem Statement\nQuestion 1: Basic Vector Creation\n(a) In-class: Create a numeric vector named ages that contains the ages of five friends: 21, 23, 25, 27, and 29.\n(b) Take-home: Create a character vector named colors with the values: “red”, “blue”, “green”, “yellow”, and “purple”.\n\nQuestion 2: Accessing Vector Elements\n(a) In-class: Print the age of the third friend from the ages vector.\n(b) Take-home: Print the last color in the colors vector without using its numeric index.\n\nQuestion 3: Vector Operations\n(a) In-class: Add 2 years to each age in the ages vector.\n(b) Take-home: Combine the ages and colors vectors into a single vector named combined. Print this new vector.\n\nQuestion 4: Vector Filtering\n(a) In-class: From the ages vector, filter and print ages less than 27.\n(b) Take-home: From the colors vector, find and print colors that have the letter “e” in them.\n\nChallenge Task!\n(a) In-class: Reverse the order of the colors vector. (Hint: Think about how you might use the seq() function or indexing.)\n(b) Take-home: Using a loop (advanced), print each color from the colors vector with a statement: “My favorite color is [color]”. (Replace [color] with the actual color from the vector.)]\n\n\n\nSolution\nBasic Vector Creation\n\nages <- c(21, 23, 25, 27, 29)\nprint(ages)\n\n[1] 21 23 25 27 29\n\ncolors <- c(\"red\", \"blue\", \"green\", \"yellow\", \"purple\")\nprint(colors)\n\n[1] \"red\"    \"blue\"   \"green\"  \"yellow\" \"purple\"\n\n\nAccessing Vector Elements\n\n#(a)\nthird_age <- ages[3]\nprint(third_age)\n\n[1] 25\n\n#(b)\nlast_color <- tail(colors, n=1)\nprint(last_color)\n\n[1] \"purple\"\n\n\nVector Operations\n\n#(a)\nages <- ages + 2\nprint(ages)\n\n[1] 23 25 27 29 31\n\n#(b)\ncombined <- c(ages, colors)\nprint(combined)\n\n [1] \"23\"     \"25\"     \"27\"     \"29\"     \"31\"     \"red\"    \"blue\"   \"green\" \n [9] \"yellow\" \"purple\"\n\n\nVector Filtering\n\n#(a)\nyoung_ages <- ages[ages < 27]\nprint(young_ages)\n\n[1] 23 25\n\n#(b)\ne_colors <- colors[grepl(\"e\", colors)]\nprint(e_colors)\n\n[1] \"red\"    \"blue\"   \"green\"  \"yellow\" \"purple\"\n\n\nChallenge Task!\n\n#(a)\nreversed_colors <- colors[rev(seq_along(colors))]\nprint(reversed_colors)\n\n[1] \"purple\" \"yellow\" \"green\"  \"blue\"   \"red\"   \n\n#(b)\nfor (color in colors) {\n  cat(\"My favorite color is\", color, \"\\n\")\n}\n\nMy favorite color is red \nMy favorite color is blue \nMy favorite color is green \nMy favorite color is yellow \nMy favorite color is purple"
  },
  {
    "objectID": "lec1.html#matrix",
    "href": "lec1.html#matrix",
    "title": "Lecture 1: R-Review-2023",
    "section": "Matrix",
    "text": "Matrix\nFor the matrix data structure, you need to know three things:\n\nHow to create a new Matrix\nHow to do Matrix/Linear Algebra Operations\nHow to access the Matrix specific cell.\nReview the Appendix: Matrix Operations for more information\n\n\n\nHow to create a new Matrix\nTo create a matrix in R, you can use the matrix() function. Here’s an example:\n\n# Create a matrix from a vector with 3 rows and 2 columns\nmy_matrix <- matrix(1:6, nrow = 3, ncol = 2)\nmy_matrix\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\nIn the above example, the sequence 1:6 generates a vector containing numbers from 1 to 6. This is then used to fill a matrix with 3 rows and 2 columns.\n\n\n\nHow to do Matrix/Linear Algebra Operations\nMatrix operations in R are straightforward. You can use common arithmetic operations (+, -, *, /) for element-wise operations or use specific functions for matrix-specific operations.\nFor instance, matrix multiplication (a common operation in linear algebra) can be done using the %*% operator:\n\n# Create two matrices\nA <- matrix(c(1, 2, 3, 4), nrow=2)\nB <- matrix(c(2, 0, 1, 3), nrow=2)\n\n# Matrix multiplication\nresult <- A %*% B\nresult\n\n     [,1] [,2]\n[1,]    2   10\n[2,]    4   14\n\n\nNote on Matrix Operators:\nThe difference between * and %*% can be illustrated with an example:\nLet’s say we have two matrices:\nmat1 = matrix(c(1, 2, 3, 4), nrow=2)\nmat2 = matrix(c(2, 0, 1, 3), nrow=2)\nUsing *, we get element-wise multiplication:\nmat1 * mat2\nThis will give:\n     [,1] [,2]\n[1,]    2    3\n[2,]    0   12\nUsing %*%, we get standard matrix multiplication:\nmat1 %*% mat2\nThis will give:\n     [,1] [,2]\n[1,]    4    6\n[2,]   10   12\nThus, * multiplies corresponding elements of the matrices, whereas %*% performs matrix multiplication as defined in linear algebra.\nHere, matrices A and B are multiplied together to get the result matrix.\n\n\n\nHow to access the Matrix specific cell\nYou can access a specific cell of a matrix by using the row and column indices. Here’s how you can do it:\n\n# Using the previous matrix, let's access the element at the 2nd row and 1st column\nelement <- my_matrix[2, 1]\nelement\n\n[1] 2\n\n\nThe value in the second row and first column of my_matrix is extracted and stored in the element variable.\n\n\n\nExercise: Basic Matrix Algebra Calculation\n\nIn-class Exercise on R Vectors and Matrix Operations\n\nQuestion 1: Mathematical Functions\n(a) In-class:\nGiven the sequence seq1 <- c(3, 4, 12, 16, 5), calculate:\n\nSquare root of each element.\nAbsolute value after subtracting 7 from each element.\nNatural logarithm of each element.\n\n(b) Take-home:\nGiven the sequence seq2 <- c(8, 14, 7, 5, 9), calculate:\n\nFactorial of each element.\nThe exponential value of each element.\nTrigonometric sine of each element.\n\n\nQuestion 2: Basic Statistics\n(a) In-class:\nGiven the sequence data1 <- c(2, 4, 6, 8, 10), calculate:\n\nMean value.\nMedian value.\nStandard deviation.\n\n(b) Take-home:\nGiven the sequence data2 <- c(3, 5, 8, 9, 12), calculate:\n\nVariance.\nMinimum and maximum values.\nThe 1st quantile (25th percentile).\n\n\nQuestion 3: Matrix Calculation\n(a) In-class:\nGiven the matrices:\nmatA = matrix(c(2, 3, 1, 5), nrow=2)\nmatB = matrix(c(1, 0, 2, 4), nrow=2)\n\nPerform matrix addition between matA and matB.\nPerform element-wise multiplication between matA and matB.\nTranspose matA.\n\n(b) Take-home:\n\nPerform matrix multiplication between matA and matB.\nCalculate the determinant of matA.\nFind the eigenvalues of matA.\n\n\nChallenging Question:\nGiven the matrices:\nmatX = matrix(c(4, 3, 2, 1), nrow=2)\nmatY = matrix(c(1, 2, 3, 4), nrow=2)\n\nProve or disprove: The matrix product of matX and matY is commutative. (i.e., show whether matX %*% matY is equal to matY %*% matX or not).\n\n\n\n\nSolution\nAnswer Keys for the In-class Exercise on R Vectors and Matrix Operations\n\nQuestion 1: Mathematical Functions\n(a) In-class:\nGiven the sequence seq1 <- c(3, 4, 12, 16, 5):\n\nSquare root of each element:\n::: {.cell}\nseq1 <- c(3, 4, 12, 16, 5)\nsqrt(seq1)\n::: {.cell-output .cell-output-stdout} [1] 1.732051 2.000000 3.464102 4.000000 2.236068 ::: :::\nAbsolute value after subtracting 7 from each element:\n::: {.cell}\nabs(seq1 - 7)\n::: {.cell-output .cell-output-stdout} [1] 4 3 5 9 2 ::: :::\nNatural logarithm of each element:\n::: {.cell}\nlog(seq1)\n::: {.cell-output .cell-output-stdout} [1] 1.098612 1.386294 2.484907 2.772589 1.609438 ::: :::\n\n(b) Take-home:\nGiven the sequence seq2 <- c(8, 14, 7, 5, 9):\n\nFactorial of each element:\n::: {.cell}\nseq2 <- c(8, 14, 7, 5, 9)\nfactorial(seq2)\n::: {.cell-output .cell-output-stdout} [1]       40320 87178291200        5040         120      362880 ::: :::\nThe exponential value of each element:\n::: {.cell}\nexp(seq2)\n::: {.cell-output .cell-output-stdout} [1]    2980.9580 1202604.2842    1096.6332     148.4132    8103.0839 ::: :::\nTrigonometric sine of each element:\n::: {.cell}\nsin(seq2)\n::: {.cell-output .cell-output-stdout} [1]  0.9893582  0.9906074  0.6569866 -0.9589243  0.4121185 ::: :::\n\n\nQuestion 2: Basic Statistics\n(a) In-class:\nGiven the sequence data1 <- c(2, 4, 6, 8, 10):\n\nMean value:\n::: {.cell}\ndata1 <- c(2, 4, 6, 8, 10)\nmean(data1)\n::: {.cell-output .cell-output-stdout} [1] 6 ::: :::\nMedian value:\n::: {.cell}\nmedian(data1)\n::: {.cell-output .cell-output-stdout} [1] 6 ::: :::\nStandard deviation:\n::: {.cell}\nsd(data1)\n::: {.cell-output .cell-output-stdout} [1] 3.162278 ::: :::\n\n(b) Take-home:\nGiven the sequence data2 <- c(3, 5, 8, 9, 12):\n\nVariance:\n::: {.cell}\ndata2 <- c(3, 5, 8, 9, 12)\nvar(data2)\n::: {.cell-output .cell-output-stdout} [1] 12.3 ::: :::\nMinimum and maximum values:\n::: {.cell}\nmin(data2)\n::: {.cell-output .cell-output-stdout} [1] 3 ::: :::\n::: {.cell}\nmax(data2)\n::: {.cell-output .cell-output-stdout} [1] 12 ::: :::\nThe 1st quantile (25th percentile):\n::: {.cell}\nquantile(data2, 0.25)\n::: {.cell-output .cell-output-stdout} 25%     5 ::: :::\n\n\nQuestion 3: Matrix Calculation\n(a) In-class:\nGiven the matrices:\n\nmatA = matrix(c(2, 3, 1, 5), nrow=2)\nmatB = matrix(c(1, 0, 2, 4), nrow=2)\n\n\nMatrix addition between matA and matB:\n::: {.cell}\nmatA + matB\n::: {.cell-output .cell-output-stdout} [,1] [,2]  [1,]    3    3  [2,]    3    9 ::: :::\nElement-wise multiplication between matA and matB:\n::: {.cell}\nmatA * matB\n::: {.cell-output .cell-output-stdout} [,1] [,2]  [1,]    2    2  [2,]    0   20 ::: :::\nTranspose matA:\n::: {.cell}\nt(matA)\n::: {.cell-output .cell-output-stdout} [,1] [,2]  [1,]    2    3  [2,]    1    5 ::: :::\n\n(b) Take-home:\n\nMatrix multiplication between matA and matB:\n::: {.cell}\nmatA %*% matB\n::: {.cell-output .cell-output-stdout} [,1] [,2]  [1,]    2    8  [2,]    3   26 ::: :::\nDeterminant of matA:\n::: {.cell}\ndet(matA)\n::: {.cell-output .cell-output-stdout} [1] 7 ::: :::\nEigenvalues of matA:\n::: {.cell}\neigen(matA)$values\n::: {.cell-output .cell-output-stdout} [1] 5.791288 1.208712 ::: :::\n\n\nChallenging Question:\nGiven the matrices:\n\nmatX = matrix(c(4, 3, 2, 1), nrow=2)\nmatY = matrix(c(1, 2, 3, 4), nrow=2)\n\n\nMatrix product of matX and matY versus matY and matX:\n::: {.cell}\nmatX %*% matY\n::: {.cell-output .cell-output-stdout} [,1] [,2]  [1,]    8   20  [2,]    5   13 ::: :::\n::: {.cell}\nmatY %*% matX\n::: {.cell-output .cell-output-stdout} [,1] [,2]  [1,]   13    5  [2,]   20    8 ::: :::\nAs these results are not equal, the matrix product is not commutative for matX and matY."
  },
  {
    "objectID": "lec1.html#list",
    "href": "lec1.html#list",
    "title": "Lecture 1: R-Review-2023",
    "section": "List",
    "text": "List\nLists in R are a type of data structure that allow you to store elements of different types (e.g., numbers, strings, vectors, and even other lists). Here’s a comprehensive tutorial on using lists in R:\n\n\nHow to create a new List\nTo create a list in R, you can use the list() function. Here’s how:\n\n# Create a list containing a number, a character string, and a vector\nmy_list <- list(age = 25, name = \"John\", scores = c(85, 90, 95))\nmy_list\n\n$age\n[1] 25\n\n$name\n[1] \"John\"\n\n$scores\n[1] 85 90 95\n\n\nThe above code creates a list my_list with three elements: an age, a name, and a vector of scores.\n\n\n\nHow to modify and add elements to a List\nYou can modify an existing list element or add a new element by using the [[ ]] operator.\n\n# Modify the age\nmy_list[[1]] <- 26\n\n# Add a new element, address\nmy_list$address <- \"123 R Street\"\n\nmy_list\n\n$age\n[1] 26\n\n$name\n[1] \"John\"\n\n$scores\n[1] 85 90 95\n\n$address\n[1] \"123 R Street\"\n\n\nIn this example, the age is modified, and a new element address is added to the list.\n\n\n\nHow to access elements in a List\nTo access elements in a list, you can use either the [[ ]] operator or the $ operator:\n\n# Access the name using double square brackets\nperson_name <- my_list[[2]]\n\n# Access scores using the dollar sign\ntest_scores <- my_list$scores\n\nperson_name\n\n[1] \"John\"\n\ntest_scores\n\n[1] 85 90 95\n\n\nHere, the second element of my_list (name) is accessed using [[ ]], and the scores are accessed using $.\n\n\n\nHow to remove elements from a List\nYou can remove an element from a list by setting it to NULL:\n\n# Remove the address element\nmy_list$address <- NULL\n\nmy_list\n\n$age\n[1] 26\n\n$name\n[1] \"John\"\n\n$scores\n[1] 85 90 95\n\n\nThe element address is removed from the list in this example.\n\nRemember, lists are versatile and can hold heterogeneous data, making them crucial for various applications in R, especially when you need to organize and structure diverse data types.\n\n\nExercise: List\n\nQuestions\n\nQuestion 1: Creating and Modifying Lists\n(a) In-class:\n\nCreate a list named student_info containing the following elements:\n\nname: “Alice”\nage: 20\nsubjects: a vector with “Math”, “History”, “Biology”\n\nDisplay the created list.\n\n(b) Take-home:\n\nAdd two more elements to the student_info list:\n\ngrades: a vector with scores 90, 85, 88 corresponding to the subjects.\naddress: “123 Main St”\n\nDisplay the updated list.\n\n\nQuestion 2: Accessing and Analyzing List Elements\n(a) In-class:\n\nFrom the student_info list, extract and print:\n\nThe name of the student.\nThe subjects they are studying.\n\n\n(b) Take-home:\n\nCalculate and display:\n\nThe average grade of the student using the grades element from the list.\nThe number of subjects the student is studying.\n\n\n\nQuestion 3: Nested Lists\n(a) In-class:\n\nCreate a nested list named school_info with the following structure:\n\nschool_name: “Greenwood High”\nstudents: a list containing two elements:\n\nstudent1: the student_info list you created in Question 1.\nstudent2: a new list with name as “Bob”, age as 22, and subjects with “Physics”, “Math”, “English”.\n\n\nDisplay the created nested list.\n\n(b) Take-home:\n\nAdd a new student, student3, to the students list in school_info with your own details. Display the updated school_info list.\n\n\nChallenging Question:\nGiven the school_info list:\n\nWrite a function named get_average_grade that takes in the school_info list and a student name as arguments. The function should return the average grade for the given student. If the student does not exist in the list or has no grades, return an appropriate message. Test your function with student1, student2, and another name not in the list.\n\n\n\n\nSolution\nQuestion 1: Creating and Modifying Lists\n(a) In-class:\n\n# Creating the student_info list\nstudent_info <- list(\n  name = \"Alice\",\n  age = 20,\n  subjects = c(\"Math\", \"History\", \"Biology\")\n)\n\n# Displaying the created list\nstudent_info\n\n$name\n[1] \"Alice\"\n\n$age\n[1] 20\n\n$subjects\n[1] \"Math\"    \"History\" \"Biology\"\n\n\n(b) Take-home:\n\n# Adding more elements to the list\nstudent_info$grades <- c(90, 85, 88)\nstudent_info$address <- \"123 Main St\"\n\n# Displaying the updated list\nstudent_info\n\n$name\n[1] \"Alice\"\n\n$age\n[1] 20\n\n$subjects\n[1] \"Math\"    \"History\" \"Biology\"\n\n$grades\n[1] 90 85 88\n\n$address\n[1] \"123 Main St\"\n\n\n\nQuestion 2: Accessing and Analyzing List Elements\n(a) In-class:\n\n# Extracting and printing the name and subjects\nstudent_name <- student_info$name\nstudent_subjects <- student_info$subjects\n\nstudent_name\n\n[1] \"Alice\"\n\nstudent_subjects\n\n[1] \"Math\"    \"History\" \"Biology\"\n\n\n(b) Take-home:\n\n# Calculating the average grade\naverage_grade <- mean(student_info$grades)\n\n# Counting the number of subjects\nnum_subjects <- length(student_info$subjects)\n\naverage_grade\n\n[1] 87.66667\n\nnum_subjects\n\n[1] 3\n\n\n\nQuestion 3: Nested Lists\n(a) In-class:\n\n# Creating the nested list school_info\nschool_info <- list(\n  school_name = \"Greenwood High\",\n  students = list(\n    student1 = student_info,\n    student2 = list(name = \"Bob\", age = 22, subjects = c(\"Physics\", \"Math\", \"English\"))\n  )\n)\n\n# Displaying the created nested list\nschool_info\n\n$school_name\n[1] \"Greenwood High\"\n\n$students\n$students$student1\n$students$student1$name\n[1] \"Alice\"\n\n$students$student1$age\n[1] 20\n\n$students$student1$subjects\n[1] \"Math\"    \"History\" \"Biology\"\n\n$students$student1$grades\n[1] 90 85 88\n\n$students$student1$address\n[1] \"123 Main St\"\n\n\n$students$student2\n$students$student2$name\n[1] \"Bob\"\n\n$students$student2$age\n[1] 22\n\n$students$student2$subjects\n[1] \"Physics\" \"Math\"    \"English\"\n\n\n(b) Take-home:\n\n# Adding student3 to the students list\nschool_info$students$student3 <- list(name = \"Charlie\", age = 23, subjects = c(\"Chemistry\", \"Music\", \"Art\"))\n\n# Displaying the updated school_info list\nschool_info\n\n$school_name\n[1] \"Greenwood High\"\n\n$students\n$students$student1\n$students$student1$name\n[1] \"Alice\"\n\n$students$student1$age\n[1] 20\n\n$students$student1$subjects\n[1] \"Math\"    \"History\" \"Biology\"\n\n$students$student1$grades\n[1] 90 85 88\n\n$students$student1$address\n[1] \"123 Main St\"\n\n\n$students$student2\n$students$student2$name\n[1] \"Bob\"\n\n$students$student2$age\n[1] 22\n\n$students$student2$subjects\n[1] \"Physics\" \"Math\"    \"English\"\n\n\n$students$student3\n$students$student3$name\n[1] \"Charlie\"\n\n$students$student3$age\n[1] 23\n\n$students$student3$subjects\n[1] \"Chemistry\" \"Music\"     \"Art\"      \n\n\n\nChallenging Question:\n\n# Function to get the average grade of a student\nget_average_grade <- function(school_info, student_name) {\n  student_data <- school_info$students[[student_name]]\n  if (!is.null(student_data) && !is.null(student_data$grades)) {\n    return(mean(student_data$grades))\n  } else {\n    return(paste(\"No grades found for\", student_name))\n  }\n}\n\n# Testing the function\nget_average_grade(school_info, \"student1\")\n\n[1] 87.66667\n\nget_average_grade(school_info, \"student2\")\n\n[1] \"No grades found for student2\"\n\nget_average_grade(school_info, \"John\")\n\n[1] \"No grades found for John\""
  },
  {
    "objectID": "lec1.html#data-frame",
    "href": "lec1.html#data-frame",
    "title": "Lecture 1: R-Review-2023",
    "section": "Data Frame",
    "text": "Data Frame\nA data frame is a table-like structure that stores data in rows and columns. Each column in a data frame can be of a different data type (e.g., numeric, character, factor), but all elements within a column must be of the same type. This makes data frames ideal for representing datasets.\n\nCreating a Data Frame\nData frames can be created using the data.frame() function.\n\n# Example\nstudents <- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Age = c(20, 21, 19),\n  Grade = c(\"A\", \"B\", \"A\")\n)\n\nprint(students)\n\n     Name Age Grade\n1   Alice  20     A\n2     Bob  21     B\n3 Charlie  19     A\n\n\n\n\nAccessing Data in Data Frames (Indexing)\nIn R, data frames are similar to tables in that they store data in rows and columns. Each row represents an observation and each column a variable. Indexing in data frames refers to accessing specific rows, columns, or cells of the data frame.\n\nBy Column Name\nYou can access the data of a specific column using the $ operator or double square brackets.\n\n# Creating a sample data frame\ndf <- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Age = c(20, 21, 19),\n  Grade = c(\"A\", \"B\", \"A\")\n)\n\n# Accessing the 'Name' column using the `$` operator\nnames <- df$Name\nprint(names)\n\n[1] \"Alice\"   \"Bob\"     \"Charlie\"\n\n# Accessing the 'Age' column using double square brackets\nages <- df[[\"Age\"]]\nprint(ages)\n\n[1] 20 21 19\n\n\n\n\nBy Column Index\nYou can also access a column by its numeric index.\n\n# Accessing the first column\nfirst_column <- df[,1]\nprint(first_column)\n\n[1] \"Alice\"   \"Bob\"     \"Charlie\"\n\n\n\n\nBy Row Index\nYou can access specific rows using their numeric indices.\n\n# Accessing the first and third rows\nrows_1_and_3 <- df[c(1,3), ]\nprint(rows_1_and_3)\n\n     Name Age Grade\n1   Alice  20     A\n3 Charlie  19     A\n\n\n\n\nBy Row and Column Indices\nYou can access a specific cell of the data frame using its row and column indices.\n\n# Accessing the age of the second student\nage_of_second <- df[2, 2]\nprint(age_of_second)\n\n[1] 21\n\n\n\n\nBy Row and Column Names\nYou can also use row and column names to access specific cells. Note: By default, data frames in R do not have row names unless explicitly set.\n\n# Setting row names for our data frame\nrownames(df) <- c(\"Student1\", \"Student2\", \"Student3\")\n\n# Accessing the grade of the third student using row and column names\ngrade_of_third <- df[\"Student3\", \"Grade\"]\nprint(grade_of_third)\n\n[1] \"A\"\n\n\n\n\n\n\nModifying a Data Frame\nWe will talk more about this section in the Data Cleaning Session. But we can see an example on columns manipulation:\n\n# Adding a new column\nstudents$Major <- c(\"Math\", \"Biology\", \"Physics\")\nprint(students)\n\n     Name Age Grade   Major\n1   Alice  20     A    Math\n2     Bob  21     B Biology\n3 Charlie  19     A Physics\n\n# Modifying a column\nstudents$Age <- students$Age + 1\nprint(students)\n\n     Name Age Grade   Major\n1   Alice  21     A    Math\n2     Bob  22     B Biology\n3 Charlie  20     A Physics\n\n# Removing a column\nstudents$Major <- NULL\nprint(students)\n\n     Name Age Grade\n1   Alice  21     A\n2     Bob  22     B\n3 Charlie  20     A\n\n\n\n\nUseful Functions for Data Frames\nHere are some functions that are particularly useful when working with data frames:\n\nhead(df): Displays the first six rows of the data frame df.\ntail(df): Displays the last six rows of the data frame df.\nstr(df): Provides a structured overview of the data frame df, showing the data types of each column and the first few entries of each column.\ndim(df): Returns the dimensions (number of rows and columns) of the data frame df.\nsummary(df): Provides a statistical summary of each column in the data frame df.\n\n\n\n\nLoad and Save Data Frames in R\nHandling data is one of the most essential aspects of data analysis in R. In this section, we’ll explore how to load data into R from external sources and save it for future use.\n\nRead a CSV File\nTo read a CSV (Comma-Separated Values) file and store its contents as a data frame, use the read.csv() function.\n\n# Load a CSV file into a data frame\ndf <- read.csv(\"path_to_file.csv\")\n\n# Display the first few rows of the data frame\nhead(df)\n\n\n\nSaving to CSV Files\nTo save a data frame to a CSV file, use the write.csv() function.\n\n# Save a data frame to a CSV file\nwrite.csv(df_csv, \"path_to_output_file.csv\", row.names = FALSE)\n\n# Note: `row.names = FALSE` ensures that row names are not written to the CSV.\n\n\n\nLoading Data Frames from Excel Files\nTo work with Excel files, you might need external packages like readxl and writexl. Steps should be:\n\nInstall and load the haven package:install.packages(\"readxl\")\nLoad the library: library(readxl)\nUse data using: df_excel <- read_excel(\"path_to_file.xlsx\")\n\n\n\nLoading Data Frames from STATA’s .dta File\nTo read .dta files from Stata into R, follow these steps:\n\nInstall and load the haven package:install.packages(\"haven\")\nLoad the library: library(haven)\nUse data using: df_dta <- read_dta(\"path_to_file.dta\")"
  },
  {
    "objectID": "lec1.html#introduction-1",
    "href": "lec1.html#introduction-1",
    "title": "Lecture 1: R-Review-2023",
    "section": "Introduction",
    "text": "Introduction\nIn this challenge project, you will demonstrate your understanding of the basic data types, structures in R, and manipulate built-in data sets to gain insights. This project will test your proficiency in accessing values in vectors, matrices, lists, and data frames, performing basic operations, and saving & reading data frames."
  },
  {
    "objectID": "lec1.html#dataset",
    "href": "lec1.html#dataset",
    "title": "Lecture 1: R-Review-2023",
    "section": "Dataset",
    "text": "Dataset\nWe will use the built-in dataset mtcars. This data was extracted from the 1974 Motor Trend US magazine and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973-74 models)."
  },
  {
    "objectID": "lec1.html#tasks",
    "href": "lec1.html#tasks",
    "title": "Lecture 1: R-Review-2023",
    "section": "Tasks",
    "text": "Tasks\n\nBasic Data Types and Structures\n(a) Vectors\n\nCreate a numeric vector that represents the miles per gallon (mpg) of the mtcars dataset.\nCalculate and print the average mpg.\nAccess and print the mpg of the 10th car.\n\n(b) Matrices\n\nConvert the first 5 rows and 3 columns of the mtcars dataset into a matrix.\nPerform a matrix operation: Multiply the above matrix by 2 and print the result.\n\n(c) Lists\n\nCreate a list that contains:\n\nA numeric vector of horsepower (hp) of the cars.\nA character vector of car model names.\n\nAccess and print the name of the 5th car from the list.\n\n\n\nData Frame Operations\n\nAccess and print the details of the car with the highest horsepower.\nSave this single-row data frame to a CSV file named “high_hp_car.csv”.\nRead the “high_hp_car.csv” file back into R and print its contents to confirm the saved data.\n\n\n\nComprehensive Exploration\n\nFilter cars that have an mpg greater than 20 and less than 6 cylinders.\nFor these filtered cars, calculate:\n\nThe average horsepower.\nThe median weight.\nThe number of cars with manual transmission (am column value is 1).\n\n\n\n\nChallenge Question!\n\nCreate a matrix of dimensions 3x3 using the mpg, hp, and wt (weight) columns for the first three cars.\nInvert this matrix. (Hint: You can use the solve() function.)\nCheck if the matrix is singular before inversion (its determinant should not be zero)."
  },
  {
    "objectID": "lec1.html#deliverables",
    "href": "lec1.html#deliverables",
    "title": "Lecture 1: R-Review-2023",
    "section": "Deliverables",
    "text": "Deliverables\n\nAn R script containing all the operations performed and any auxiliary functions created.\nThe “high_hp_car.csv” file.\n(Optional) A brief report generated by rmd with output (in html PDF file)."
  },
  {
    "objectID": "lec1.html#solutions",
    "href": "lec1.html#solutions",
    "title": "Lecture 1: R-Review-2023",
    "section": "Solutions",
    "text": "Solutions\nYou can find the solution here."
  },
  {
    "objectID": "lec1.html#math-operations",
    "href": "lec1.html#math-operations",
    "title": "Lecture 1: R-Review-2023",
    "section": "Math Operations",
    "text": "Math Operations\n\n\n\n\n\n\n\n\n\nFunction\nDescription\nExample\nResult\n\n\n\n\nsqrt()\nSquare root\nsqrt(9)\n3\n\n\nabs()\nAbsolute value\nabs(-10)\n10\n\n\nlog()\nNatural logarithm (base e)\nlog(2.72)\n1\n\n\nlog10()\nLogarithm base 10\nlog10(100)\n2\n\n\nexp()\nExponential function (base e)\nexp(1)\n2.71828 (approximately e)\n\n\nfactorial()\nFactorial of a number\nfactorial(4)\n24\n\n\n^\nExponentiation\n2^3\n8\n\n\nround()\nRounds a number\nround(2.678, 2)\n2.68\n\n\nceiling()\nRounds up to the nearest integer\nceiling(2.1)\n3\n\n\nfloor()\nRounds down to the nearest integer\nfloor(2.9)\n2\n\n\ntrunc()\nRemoves the decimal part\ntrunc(2.9)\n2\n\n\nsin(), cos(), tan()\nTrigonometric functions\nsin(pi/2)\n1"
  },
  {
    "objectID": "lec1.html#basic-statistical-operations",
    "href": "lec1.html#basic-statistical-operations",
    "title": "Lecture 1: R-Review-2023",
    "section": "Basic Statistical Operations",
    "text": "Basic Statistical Operations\n\n\n\n\n\n\n\n\n\nFunction\nDescription\nExample\nResult\n\n\n\n\nmean()\nArithmetic mean (average)\nmean(c(1, 2, 3, 4, 5))\n3\n\n\nmedian()\nMedian (middle value)\nmedian(c(1, 3, 5, 7, 9))\n5\n\n\nsd()\nStandard deviation\nsd(c(1, 2, 3, 4, 5))\n1.5811\n\n\nvar()\nVariance\nvar(c(1, 2, 3, 4, 5))\n2.5\n\n\nmin()\nMinimum value\nmin(c(2, 5, 1, 8, 7))\n1\n\n\nmax()\nMaximum value\nmax(c(2, 5, 1, 8, 7))\n8\n\n\nrange()\nRange (min and max)\nrange(c(2, 5, 1, 8, 7))\n1, 8\n\n\nsum()\nSum of values\nsum(c(1, 2, 3, 4, 5))\n15\n\n\nquantile()\nQuantiles (e.g., quartiles)\nquantile(c(1, 2, 3, 4, 5), 0.25)\n1.5\n\n\ncor()\nCorrelation coefficient\ncor(c(1, 2, 3), c(3, 2, 1))\n-1\n\n\ncov()\nCovariance\ncov(c(1, 2, 3), c(3, 2, 1))\n-1\n\n\ntable()\nFrequency table of factors\ntable(c(\"A\", \"A\", \"B\", \"B\", \"C\"))\nA: 2, B: 2, C: 1\n\n\nprop.table()\nProportional table\nprop.table(table(c(\"A\", \"A\", \"B\", \"B\", \"C\")))\nA: 0.4, B: 0.4, C: 0.2"
  },
  {
    "objectID": "lec1.html#vector-operations",
    "href": "lec1.html#vector-operations",
    "title": "Lecture 1: R-Review-2023",
    "section": "Vector Operations",
    "text": "Vector Operations\n\n\n\n\n\n\n\nDescription\nCode\n\n\n\n\nCreate a sequence\nnums = 2:6\n\n\nGenerate repeated numbers\nsevens = rep(7, times=5)\n\n\nRepeat a string\nvec_hello = rep(\"Hello\", times = 7)\n\n\nRepeat a string multiple times\nvec_hello_20 = rep(vec_hello, times = 2)\n\n\nSequence with incremental steps\nvec_range = seq(from = 3.2, to = 4.5, by = 0.2)\n\n\nInitialize a zero vector\noutputs = integer(length=7)\n\n\nCombine vectors\nvec_merge = c(nums, rep(seq(2, 6, 2), 2), c(2, 3, 5), 77, 5:3)\n\n\nCheck vector length\nlength(vec_merge)\n\n\nAccess the first value\nvec2[1]\n\n\nOmit the first value\nvec2[-1]\n\n\nAccess elements using an index range\nvec2[2:4]\n\n\nSelect specific elements\nvec2[c(2,3,6)]\n\n\nAdd a scalar to a vector\nvec2 + 2\n\n\nMultiply all elements by a scalar\n3 * vec2\n\n\nCompute square root\nsqrt(vec2)\n\n\nAdd two vectors\nvec2 + 3*vec2\n\n\nCompare vector with a scalar\nvec2 > 4\n\n\nCheck if vector contains an exact value\nvec2 == 3\n\n\nLogical AND condition\nvec2 > 3 & vec2!=4\n\n\nLogical OR condition\nvec2 > 3 | vec2!=5\n\n\nFilter elements based on a condition\nvec2[vec2>4]\n\n\nIndex of elements that meet a condition\nwhich(vec2>6)\n\n\nLargest element in vector\nmax(vec2)\n\n\nIndex of largest element\nwhich.max(vec2)\n\n\nSmallest element in vector\nmin(vec2)\n\n\nIndex of smallest element\nwhich.min(vec2)\n\n\nSum of all elements in a vector\nsum(vec2)\n\n\nProduct of all elements in a vector\nprod(vec2)\n\n\nMean value of a vector\nmean(vec2)\n\n\nMedian value of a vector\nmedian(vec2)"
  },
  {
    "objectID": "lec1.html#matrix-operation",
    "href": "lec1.html#matrix-operation",
    "title": "Lecture 1: R-Review-2023",
    "section": "Matrix Operation",
    "text": "Matrix Operation\n\n\n\n\n\n\n\n\n\nOperation\nSymbol/Function\nDescription\nExample\n\n\n\n\nMatrix Addition\n+\nElement-wise addition of two matrices\nmat1 + mat2\n\n\nMatrix Subtraction\n-\nElement-wise subtraction of two matrices\nmat1 - mat2\n\n\nElement-wise Multiplication\n*\nMultiplies each element of one matrix with the corresponding element of another\nmat1 * mat2\n\n\nMatrix Multiplication\n%*%\nStandard matrix multiplication\nmat1 %*% mat2\n\n\nMatrix Transposition\nt()\nTransposes a matrix (rows become columns and vice versa)\nt(mat1)\n\n\nMatrix Inversion\nsolve()\nInverts a matrix (only for square matrices)\nsolve(mat1)\n\n\nDeterminant\ndet()\nCalculates the determinant of a matrix\ndet(mat1)\n\n\nEigenvalues and Eigenvectors\neigen()\nCalculates the eigenvalues and eigenvectors of a matrix\neigen(mat1)"
  },
  {
    "objectID": "lec0.html",
    "href": "lec0.html",
    "title": "Lecture 0: R-Review-2023",
    "section": "",
    "text": "Let us firstly set up our R programming environment and have an overview of Rstudio.\n\n\nPlease follow the instruction of this link to download and install R and Rstudio.\n\n\n\n\nR is a language and environment for statistical computing and graphics.\nRStudio is an integrated development environment for R.\n\n\n\n\nThere are four main windows in Rstudio.\n\nThe Console window\n\n\n\n\n\n\n\nThe Source window: Here is place we normally write our code.\n\n\n\n\n\n\n\nThe Environment / History / Connections / Tutorial window: Right now it is empty, because we have not loaded any data yet. Here is the place, we can see some data frames, functions, and vectors.\n\n\n\n\n\n\n\nThe Files / Plots / Packages / Help / Viewer window: You can see your file path, plots, etc. in this window."
  },
  {
    "objectID": "lec0.html#r-script",
    "href": "lec0.html#r-script",
    "title": "Lecture 0: R-Review-2023",
    "section": "R script",
    "text": "R script\nYou always need yourself and your collaborator know what is your script about. So, please define some basic information for your R script. The following is an example I use.\n\n#____________________________\n#  Script Information----\n#____________________________\n##\n## Script Title: Introduction to R Statistical Software\n##\n## Task: Lecture 0\n##\n## Author: Lifeng Ren\n##\n## Date Last Modified: 2023-08-14\n##\n## Date Created: 2023-08-14\n##\n## Copyright (c) Lifeng Ren, 2023\n## Email: ren00154@umn.edu\n##\n## ___________________________\n##\n## Version: V1.0 (2023-08-14)\n##   \n## Version Notes: Initial Efforts\n## ___________________________\n\nYou can create RStudio headers (that can be tracked by Rstudio) using the\n\nWindows: Ctrl + Shift + R\nMac OS: Command + Shift + R\n\nIf you test and try a little bit you would find that R can track and of the following format: #+ space + your section name + ---- (four dashes).\n\n# This is a default R section -------------------------------\n\n#____________________________________________   This is `underscore`\n#  Single has tag will not bold the words----   This is `dash`\n#____________________________________________   This is `underscore`\n\n#__________________________________________\n##  Double hash tag will bold the words----   \n#__________________________________________"
  },
  {
    "objectID": "lec0.html#r-markdown",
    "href": "lec0.html#r-markdown",
    "title": "Lecture 0: R-Review-2023",
    "section": "R Markdown",
    "text": "R Markdown\nMarkdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. .Rmd is the abbreviation for R Markdown file and for more a complete R markdown reference, I personally recommend you this user guide, and official documentation on http://rmarkdown.rstudio.com to know the full picture of R markdown.\n\nShort note: For the students taking APEC8211 - APEC8212, you need to hand in the Homework in a typed format. So, learning code in Rmd would be good to save you time.\n\nIn this class we are going to go over some very basic knowledge of R Markdown.\n\nFirst, you have the opportunity to edit your page style and header, which is called a YAML header, the following is an example of my own YAML header for this class.\n\n\n---\ntitle: \"Lecture 1: R-Review-2023\"\nauthor: \"Lifeng Ren\"\ndate: \"`r Sys.Date()`\"\noutput: \n  html_document:\n    theme: united\n    toc: true\n    toc_float: true\n    toc_depth: 2\n    highlight: tango\n    df_print: paged\n    mathjax: local\n    self_contained: false\n    number_sections: true\n    fig_width: 7\n    fig_height: 6\n    fig_caption: true\n    code_folding: hide\n---\n\nIn the Rmd documentation, we have two main things:\n\nMarkdown Document\n\nMath: use the $ sign, and the mathematical equations coding style should be the same for LaTex.\n\nFor example: The probability density function of a normal distribution could be typed as: $f(x)=\\frac{1}{\\sigma \\sqrt{2 \\pi}} e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}$, and Rmd will show the and inline output: \\(f(x)=\\frac{1}{\\sigma \\sqrt{2 \\pi}} e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}\\). Using $$ instead of the single $, will have the following output.\n\\[\n    f(x)=\\frac{1}{\\sigma \\sqrt{2 \\pi}} e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}\n  \\]\n\nHyperlink: [This is the TEXT](This is the LINK). Please use the source code of this document to see the example.\nFor other Markdown coding documentation, please refer to: R Markdown Cookbook\n\nCode Chunk (mainly should be R, but can also be customized)\nThe code chunk normally starts with r, and follows by the chunk name you defined, and then put the chunk environment after it. For example:\n::: {.cell}\n\n``` {r chunkexmaple, eval=FALSE}\nsummary(cars)\n```  # Example \n:::\n\nAccording to the online documentation of R Markdown:\n\nUsing include = FALSE hides both the code and its output in the final document. However, R Markdown still executes the code in the chunk, making the results accessible to subsequent chunks.\nSetting echo = FALSE ensures only the code is hidden, while its output remains visible in the final document. It’s particularly handy for displaying visuals without the accompanying code.\nIf you want to hide messages produced by the code, use message = FALSE.\nTo suppress warnings from being displayed in the final output, employ warning = FALSE.\nAdd a caption to images or plots using fig.cap = “…”.\nTo skip the execution of a particular code chunk altogether, use eval = FALSE.\nYou can also use knitr::opts_chunk$set(ANY OPTIONS ABOVE) like below to set a global environment for all code chunks like this:\n\nknitr::opts_chunk$set(echo = TRUE)\n\n\nMore coding details in Rmd should be reviewed using the source code I provided."
  },
  {
    "objectID": "lec0.html#coding-style",
    "href": "lec0.html#coding-style",
    "title": "Lecture 0: R-Review-2023",
    "section": "Coding Style",
    "text": "Coding Style\nWe are not professional programmer, but coding habitat is super important. Here are some most important parts I think you should be careful of.\n\nNaming\n\nPlease name your variables in either the following way, and being consistent:\n\nMyVariable\nmy_variable\nmy.variable\n\nDo not start a name with numbers like: 2023badname\nDo not include illegal characters like: 2023/%badname\n\n\n\nComments\n\nRemind yourself and other collaborators with comments in addition to headers.\nFor example:\n::: {.cell}\n#__________________________________________\n##  Comments Your Code is Important----   \n#__________________________________________\n\nmean(x) # You might not need to generate comments for a simple function\n\n\n# A function to generate the Fibonacci sequence\nfibonacci <- function(n) { # but for a complex function you need more comments\n  if (n <= 0) {\n    return(integer(0))  # return an empty integer vector for non-positive n\n  } else if (n == 1) {\n    return(0)\n  } else if (n == 2) {\n    return(c(0, 1))\n  } else {\n    fib_sequence <- c(0, 1)\n    for (i in 3:n) {\n      next_element <- sum(tail(fib_sequence, 2))\n      fib_sequence <- c(fib_sequence, next_element)\n  }\n  return(fib_sequence)\n  }\n}\n\n# Print the first 10 numbers of the Fibonacci sequence\nprint(fibonacci(10))\n:::\n\n\n\nMost used Built-in Symbols and Command\n\n\n\n\n\n\n\n\nSymbol\nDefinition\nExample\n\n\n\n\n=\nAssigns within functions/datasets.\nfun(arg = value)\n\n\n<-\nAssigns values to objects/datasets.\nobj <- 2 (shortcut: Mac: cmd+ -; Win: ctrl+-)\n\n\n==\nChecks equality.\nobj == 2 checks if obj equals 2.\n\n\n!=\nChecks inequality.\nobj != 2 checks if obj isn’t 2.\n\n\n>\nGreater than.\nobj > 2 checks if obj is more than 2.\n\n\n<\nLess than.\nobj < 2 checks if obj is less than 2.\n\n\n>=\nGreater than or equal to.\nobj >= 2\n\n\n<=\nLess than or equal to.\nobj <= 2\n\n\n!\nNOT (logical negation).\n!TRUE returns FALSE.\n\n\n&\nAND (element-wise).\nc(TRUE, FALSE) & c(TRUE, TRUE) returns TRUE, FALSE.\n\n\n\\|\nOR (element-wise).\nc(TRUE, FALSE) \\| c(FALSE, FALSE) returns TRUE, FALSE.\n\n\n&&\nAND (first element).\nTRUE && FALSE returns FALSE.\n\n\n\\|\\|\nOR (first element).\nTRUE \\|\\| FALSE returns TRUE.\n\n\n%in%\nTests if in a set.\n2 %in% c(1, 2, 3) returns TRUE.\n\n\n\nWe will see them more often in the next couple sessions."
  },
  {
    "objectID": "lec0.html#in-class-exercise",
    "href": "lec0.html#in-class-exercise",
    "title": "Lecture 0: R-Review-2023",
    "section": "In-class exercise",
    "text": "In-class exercise\nNow, let us go to Rstudio and play with what we have learned.\n\nDownload the files\n\n\nCreate a folder in your local computer for the this class, preferably named as: R_Review_2023\nDownload the lec1 folder/zip file under R_Review_2023 from Canvas or GitHub Repository\nOpen lec1_stu.R: Change the Script Information with your own names, date, …\n\n\nprint: “Hello World”\n\n\nIn the source window, type the following code and select the sentence and click on Run\n\n  print(\"Hello World!\")\n\n[1] \"Hello World!\"\n\n\nType the same thing in the Console window, and hit enter.\nGet Help with any functions like print: ?print()\n\n  ?print()\n\n\n\nAssign a char value to hello using the following code and see the change in the envrionemt window. Then, print out hello.\n::: {.cell}\n  hello <- \"Hello World!\"\n  print(hello)\n::: {.cell-output .cell-output-stdout} [1] \"Hello World!\" ::: :::"
  }
]