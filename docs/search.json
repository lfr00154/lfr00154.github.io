[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Lifeng Ren",
    "section": "",
    "text": "This is personal website for Lifeng Ren, the website is under construction.\n\n\n\n Back to top"
  },
  {
    "objectID": "ideas.html",
    "href": "ideas.html",
    "title": "Brainstorming Ideas",
    "section": "",
    "text": "As mentioned in the meeting, we will set up another meeting (off-schedule) to dive further into the ideas we settled on. Each idea was assigned to someone who will distribute the 1 page proposal prior to our next meeting for comments/suggestions. Then at the next session we will do a brainstorming break-out exercise to settle on (1) which ideas to pursue, (2) what the structure of the project looks like, and (3) assign division of work.\nThe topics were assigned to: Nfamara: Nature based solutions for cooling Steve: Global differences in ecosystem value under different reforms and different scenarios Adriana: Water quality, access, and poverty in the USA Saleh: Coastal erosion, housing, and nature-based solutions to natural disasters. Below are notes on the topics from our meeting that were written on the board.\nNfamara: Nature based solutions for cooling Developed vs developing settings biodiversity as cooling in urban areas Saving and energy costs for wealthy vs. health costs for poor. Similar to work by world bank in India Nature based solutions (Invest) to consider ecological relationships before application of policies Steve: Global differences in ecosystem value under different reforms and different scenarios Similar to Invest-GTAP. Fits in NatCap portfolio Evaluate GDP and GEP Economic analysis of ecosystem services and distribution Benefit is can produce many side projects Adriana: Water quality, access, and poverty in the USA Safe water act and the quality of water Replacement of lead pipes and addressing forever chemicals (PFAS) Inequality in use of recreational water (swimming, lakes, etc.) Saleh: Coastal erosion, housing, and nature-based solutions to natural disasters. Water rise and vulnerability of housing Previous work had issues with DEM and mapping this to housing Similar to work done at UC Santa Cruz What is odd is that prices are rising in coastal areas vulnerable to consistent natural disasters. Why take the risky investments? Potentially a way of seeing how individuals rationalize risk when a loss is inevitable (p/m a couple of years). Perhaps willingness to relocate/migrate is determined by loss of property value’s future growth (wealthy) or limited resources to move (poor) The scarcity of coastal housing due to continued natural disasters may increase the NPV (risk makes it MORE valuable) Could be analyzed in similar fashion as hedonic models or willingness to pay. Perhaps there are nature-based solutions to coastal erosion (mangroves) that can help with opportunity cost."
  },
  {
    "objectID": "skills.html",
    "href": "skills.html",
    "title": "Skill Sessions",
    "section": "",
    "text": "Presenter: Lifeng Ren\nHere is the link to the Recordings\nHere is the link to the Materials"
  },
  {
    "objectID": "skills.html#gtap-followup-and-intro-to-quarto-2023-07-17",
    "href": "skills.html#gtap-followup-and-intro-to-quarto-2023-07-17",
    "title": "Skill Sessions",
    "section": "GTAP Followup and Intro to Quarto (2023-07-17)",
    "text": "GTAP Followup and Intro to Quarto (2023-07-17)\n\nPresenter: Lifeng Ren\nHere is the link to the Recordings\nHere is the link to the Materials"
  },
  {
    "objectID": "events.html",
    "href": "events.html",
    "title": "Lab Meetings",
    "section": "",
    "text": "Session Type\nDate\nSession Leader\nTopic\n\n\n\n\nRegular Lab Meeting\n2023-06-12\nLifeng\nMitigation Expenditure and Extreme Wildfire Smoke Exposure in California\n\n\nSkill Session\n2023-06-26\nLifeng\nGTAP\n\n\nRegular Lab Meeting\n2023-07-10\nLibby\nAccounting for environmental justice and equity within Natural Capital Accounts\n\n\nSkill Session\n2023-07-17\nLifeng\nGTAP pt. 2\n\n\nRegular Lab Meeting\n2023-07-24\nRyan\nLab Research Brainstorming Session\n\n\nSkill Session\n2023-07-31\nLibby\nInVEST/raster data prep\n\n\nRegular Lab Meeting\n2023-08-07\nLingling\nNASA EEJ\n\n\nSkill Session\n2023-08-14\nNfamara\nRemote sensing methods and techniques\n\n\nRegular Lab Meeting\n2023-08-21\nYanxu\nTBD\n\n\nSkill Session\n2023-08-28\nSaleh\nSemantic segmentation for satellite imagery\n\n\n\nNotes:\n\nLab sessions are held biweekly, every other Monday at 12:00pm in Ruttan 119.\nLab session for 2023-07-31 would be held in Ruttan 230.\nWe might need to find an additional time for the brainstorming session."
  },
  {
    "objectID": "resource.html",
    "href": "resource.html",
    "title": "Public Resources",
    "section": "",
    "text": "Presenter: Lifeng Ren\nRecordings\nMaterials: [Slides_Option_GoogleDrive], [Data]\n\n\n\n\n\nPresenter: Lifeng Ren\nHere is the link to the Recordings\nHere is the link to the Materials: [Slides], [Code], [Data]"
  },
  {
    "objectID": "resource.html#regular-sessions",
    "href": "resource.html#regular-sessions",
    "title": "Public Resources",
    "section": "Regular Sessions",
    "text": "Regular Sessions"
  },
  {
    "objectID": "resource.html#brainstorming-sessions",
    "href": "resource.html#brainstorming-sessions",
    "title": "Public Resources",
    "section": "Brainstorming Sessions",
    "text": "Brainstorming Sessions"
  },
  {
    "objectID": "teaching.html",
    "href": "teaching.html",
    "title": "Teaching",
    "section": "",
    "text": "R Review Class for 2023 incoming PhD student"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "Lifeng is a Ph.D. student in the Department of Applied Economics at the University of Minnesota. His research interests involve using computational methods to study environmental and natural resources economics and the impact of climate changes on both global and local scales.\nLifeng holds an M.S. in Applied Mathematics and Agricultural and Resource Economics from UC Davis. He received his B.S. in Mathematics and Agricultural Economics from Purdue University.\n\n\n\n Back to top"
  },
  {
    "objectID": "lec1.html",
    "href": "lec1.html",
    "title": "Lecture 1",
    "section": "",
    "text": "In this section, we are going to learn:\n\nBasic data types in R\nMatrix/Linear Algebra calculation in R\nBasic data structures in R\nBasic data access and results print"
  },
  {
    "objectID": "lec1.html#in-class-exercise-data-type",
    "href": "lec1.html#in-class-exercise-data-type",
    "title": "Lecture 1",
    "section": "2.1 In-Class Exercise: Data Type",
    "text": "2.1 In-Class Exercise: Data Type\nUse class(), length() and is.XXX() to examine the data types\n\nCopy the following code and run them in the R script-&gt;Data Type Section.\n\n\n\nCode\n# For 5.2\nprint(paste(\"Class of 5.2:\", class(5.2)))\nprint(paste(\"Length of 5.2:\", length(5.2)))\nprint(paste(\"Is it a numeric? \", is.numeric(5.2)))\n\n# For 3L\nprint(paste(\"Class of 3L:\", class(3L)))\nprint(paste(\"Length of 3L:\", length(3L)))\nprint(paste(\"Is it an integer? \", is.integer(3L)))\n\n# For \"Hello, R!\"\nprint(paste(\"Class of 'Hello, R!':\", class(\"Hello, R!\")))\nprint(paste(\"Length of 'Hello, R!':\", length(\"Hello, R!\")))\nprint(paste(\"Is it a character? \", is.character(\"Hello, R!\")))\n\n# For TRUE\nprint(paste(\"Class of TRUE:\", class(TRUE)))\nprint(paste(\"Length of TRUE:\", length(TRUE)))\nprint(paste(\"Is it a logical? \", is.logical(TRUE)))\n\n# For FALSE\nprint(paste(\"Class of FALSE:\", class(FALSE)))\nprint(paste(\"Length of FALSE:\", length(FALSE)))\nprint(paste(\"Is it a logical? \", is.logical(FALSE)))\n\n# For 2L\nprint(paste(\"Class of 2L:\", class(2L)))\nprint(paste(\"Length of 2L:\", length(2L)))\nprint(paste(\"Is it an integer? \", is.integer(2L)))\n\n# For 100L\nprint(paste(\"Class of 100L:\", class(100L)))\nprint(paste(\"Length of 100L:\", length(100L)))\nprint(paste(\"Is it an integer? \", is.integer(100L)))\n\n# For 3 + 2i\nprint(paste(\"Class of 3 + 2i:\", class(3 + 2i)))\nprint(paste(\"Length of 3 + 2i:\", length(3 + 2i)))\nprint(paste(\"Is it a complex? \", is.complex(3 + 2i)))\n\n# For charToRaw(\"Hello\")\nraw_value &lt;- charToRaw(\"Hello\")\nprint(paste(\"Class of charToRaw('Hello'):\", class(raw_value)))\nprint(paste(\"Length of charToRaw('Hello'):\", length(raw_value)))\nprint(paste(\"Is it raw? \", is.raw(raw_value)))\n\n# For factor(c(\"low\", \"high\", \"medium\"))\nfactor_value &lt;- factor(c(\"low\", \"high\", \"medium\"))\nprint(paste(\"Class of the factor:\", class(factor_value)))\nprint(paste(\"Length of the factor:\", length(factor_value)))\nprint(paste(\"Is it a factor? \", is.factor(factor_value)))"
  },
  {
    "objectID": "lec1.html#access-to-the-value",
    "href": "lec1.html#access-to-the-value",
    "title": "Lecture 1",
    "section": "3.1 Access to the value",
    "text": "3.1 Access to the value\n\n\n\n\n\n\n\n\n\nData Structure\nDescription\nExample\nResult Description\n\n\n\n\nVector\nAccessing values by index\nv &lt;- c(10, 20, 30, 40); v[2]\nGets the second element: 20\n\n\nMatrix\nAccessing rows and columns using indices\nm &lt;- matrix(1:4, 2, 2); m[1,2]\nGets the value in the 1st row, 2nd column: 3\n\n\nData Frame\nAccessing columns by name and rows by index\ndf &lt;- data.frame(x=1:3, y=4:6); df$x\nGets the x column: 1, 2, 3\n\n\n\n\ndf[1, ]\nGets the first row as a data frame\n\n\nList\nAccessing elements by index or name\nlst &lt;- list(a=1, b=2, c=3); lst$a\nGets the a element: 1\n\n\n\n\nlst[[2]]\nGets the second element: 2\n\n\nArray\nAccessing elements using indices in each dimension\narr &lt;- array(1:8, dim=c(2,2,2)); arr[1,2,2]\nAccessing value in the given indices\n\n\nFactor\nAccessing levels and values\nf &lt;- factor(c(\"low\", \"high\", \"medium\")); levels(f)\nGets the levels of the factor"
  },
  {
    "objectID": "lec1.html#vectors",
    "href": "lec1.html#vectors",
    "title": "Lecture 1",
    "section": "3.2 Vectors",
    "text": "3.2 Vectors\n\n3.2.1 Exercise: Vectors\n\nPart (a) is for in-class use. Part (b) and Challenge Task are for your own practice at home.\nPlease do the exercise first and then check the solution.\n\n\n\nProblem StatementSolution\n\n\nQuestion 1: Basic Vector Creation\n(a) In-class: Create a numeric vector named ages that contains the ages of five friends: 21, 23, 25, 27, and 29.\n(b) Take-home: Create a character vector named colors with the values: “red”, “blue”, “green”, “yellow”, and “purple”.\n\nQuestion 2: Accessing Vector Elements\n(a) In-class: Print the age of the third friend from the ages vector.\n(b) Take-home: Print the last color in the colors vector without using its numeric index.\n\nQuestion 3: Vector Operations\n(a) In-class: Add 2 years to each age in the ages vector.\n(b) Take-home: Combine the ages and colors vectors into a single vector named combined. Print this new vector.\n\nQuestion 4: Vector Filtering\n(a) In-class: From the ages vector, filter and print ages less than 27.\n(b) Take-home: From the colors vector, find and print colors that have the letter “e” in them.\n\nChallenge Task!\n(a) In-class: Reverse the order of the colors vector. (Hint: Think about how you might use the seq() function or indexing.)\n(b) Take-home: Using a loop (advanced), print each color from the colors vector with a statement: “My favorite color is [color]”. (Replace [color] with the actual color from the vector.)]\n\n\n\nBasic Vector Creation\n\n\nCode\nages &lt;- c(21, 23, 25, 27, 29)\nprint(ages)\n\n\n[1] 21 23 25 27 29\n\n\nCode\ncolors &lt;- c(\"red\", \"blue\", \"green\", \"yellow\", \"purple\")\nprint(colors)\n\n\n[1] \"red\"    \"blue\"   \"green\"  \"yellow\" \"purple\"\n\n\nAccessing Vector Elements\n\n\nCode\n#(a)\nthird_age &lt;- ages[3]\nprint(third_age)\n\n\n[1] 25\n\n\nCode\n#(b)\nlast_color &lt;- tail(colors, n=1)\nprint(last_color)\n\n\n[1] \"purple\"\n\n\nVector Operations\n\n\nCode\n#(a)\nages &lt;- ages + 2\nprint(ages)\n\n\n[1] 23 25 27 29 31\n\n\nCode\n#(b)\ncombined &lt;- c(ages, colors)\nprint(combined)\n\n\n [1] \"23\"     \"25\"     \"27\"     \"29\"     \"31\"     \"red\"    \"blue\"   \"green\" \n [9] \"yellow\" \"purple\"\n\n\nVector Filtering\n\n\nCode\n#(a)\nyoung_ages &lt;- ages[ages &lt; 27]\nprint(young_ages)\n\n\n[1] 23 25\n\n\nCode\n#(b)\ne_colors &lt;- colors[grepl(\"e\", colors)]\nprint(e_colors)\n\n\n[1] \"red\"    \"blue\"   \"green\"  \"yellow\" \"purple\"\n\n\nChallenge Task!\n\n\nCode\n#(a)\nreversed_colors &lt;- colors[rev(seq_along(colors))]\nprint(reversed_colors)\n\n\n[1] \"purple\" \"yellow\" \"green\"  \"blue\"   \"red\"   \n\n\nCode\n#(b)\nfor (color in colors) {\n  cat(\"My favorite color is\", color, \"\\n\")\n}\n\n\nMy favorite color is red \nMy favorite color is blue \nMy favorite color is green \nMy favorite color is yellow \nMy favorite color is purple"
  },
  {
    "objectID": "lec1.html#matrix",
    "href": "lec1.html#matrix",
    "title": "Lecture 1",
    "section": "3.3 Matrix",
    "text": "3.3 Matrix\nFor the matrix data structure, you need to know three things:\n\nHow to create a new Matrix\nHow to do Matrix/Linear Algebra Operations\nHow to access the Matrix specific cell.\nReview the Appendix: Matrix Operations for more information\n\n\n\n3.3.1 How to create a new Matrix\nTo create a matrix in R, you can use the matrix() function. Here’s an example:\n\n\nCode\n# Create a matrix from a vector with 3 rows and 2 columns\nmy_matrix &lt;- matrix(1:6, nrow = 3, ncol = 2)\nmy_matrix\n\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\nIn the above example, the sequence 1:6 generates a vector containing numbers from 1 to 6. This is then used to fill a matrix with 3 rows and 2 columns.\n\n\n\n3.3.2 How to do Matrix/Linear Algebra Operations\nMatrix operations in R are straightforward. You can use common arithmetic operations (+, -, *, /) for element-wise operations or use specific functions for matrix-specific operations.\nFor instance, matrix multiplication (a common operation in linear algebra) can be done using the %*% operator:\n\n\nCode\n# Create two matrices\nA &lt;- matrix(c(1, 2, 3, 4), nrow=2)\nB &lt;- matrix(c(2, 0, 1, 3), nrow=2)\n\n# Matrix multiplication\nresult &lt;- A %*% B\nresult\n\n\n     [,1] [,2]\n[1,]    2   10\n[2,]    4   14\n\n\nNote on Matrix Operators:\nThe difference between * and %*% can be illustrated with an example:\nLet’s say we have two matrices:\nmat1 = matrix(c(1, 2, 3, 4), nrow=2)\nmat2 = matrix(c(2, 0, 1, 3), nrow=2)\nUsing *, we get element-wise multiplication:\nmat1 * mat2\nThis will give:\n     [,1] [,2]\n[1,]    2    3\n[2,]    0   12\nUsing %*%, we get standard matrix multiplication:\nmat1 %*% mat2\nThis will give:\n     [,1] [,2]\n[1,]    4    6\n[2,]   10   12\nThus, * multiplies corresponding elements of the matrices, whereas %*% performs matrix multiplication as defined in linear algebra.\nHere, matrices A and B are multiplied together to get the result matrix.\n\n\n\n3.3.3 How to access the Matrix specific cell\nYou can access a specific cell of a matrix by using the row and column indices. Here’s how you can do it:\n\n\nCode\n# Using the previous matrix, let's access the element at the 2nd row and 1st column\nelement &lt;- my_matrix[2, 1]\nelement\n\n\n[1] 2\n\n\nThe value in the second row and first column of my_matrix is extracted and stored in the element variable.\n\n\n\n3.3.4 Exercise: Basic Matrix Algebra Calculation\n\nExerciseSolution\n\n\n\nQuestion 1: Mathematical Functions\n(a) In-class:\nGiven the sequence seq1 &lt;- c(3, 4, 12, 16, 5), calculate:\n\nSquare root of each element.\nAbsolute value after subtracting 7 from each element.\nNatural logarithm of each element.\n\n(b) Take-home:\nGiven the sequence seq2 &lt;- c(8, 14, 7, 5, 9), calculate:\n\nFactorial of each element.\nThe exponential value of each element.\nTrigonometric sine of each element.\n\n\nQuestion 2: Basic Statistics\n(a) In-class:\nGiven the sequence data1 &lt;- c(2, 4, 6, 8, 10), calculate:\n\nMean value.\nMedian value.\nStandard deviation.\n\n(b) Take-home:\nGiven the sequence data2 &lt;- c(3, 5, 8, 9, 12), calculate:\n\nVariance.\nMinimum and maximum values.\nThe 1st quantile (25th percentile).\n\n\nQuestion 3: Matrix Calculation\n(a) In-class:\nGiven the matrices:\nmatA = matrix(c(2, 3, 1, 5), nrow=2)\nmatB = matrix(c(1, 0, 2, 4), nrow=2)\n\nPerform matrix addition between matA and matB.\nPerform element-wise multiplication between matA and matB.\nTranspose matA.\n\n(b) Take-home:\n\nPerform matrix multiplication between matA and matB.\nCalculate the determinant of matA.\nFind the eigenvalues of matA.\n\n\nChallenging Question:\nGiven the matrices:\nmatX = matrix(c(4, 3, 2, 1), nrow=2)\nmatY = matrix(c(1, 2, 3, 4), nrow=2)\n\nProve or disprove: The matrix product of matX and matY is commutative. (i.e., show whether matX %*% matY is equal to matY %*% matX or not).\n\n\n\n\nAnswer Keys for the In-class Exercise on R Vectors and Matrix Operations\n\nQuestion 1: Mathematical Functions\n(a) In-class:\nGiven the sequence seq1 &lt;- c(3, 4, 12, 16, 5):\n\nSquare root of each element:\n\n\n\nCode\nseq1 &lt;- c(3, 4, 12, 16, 5)\nsqrt(seq1)\n\n\n[1] 1.732051 2.000000 3.464102 4.000000 2.236068\n\n\n\nAbsolute value after subtracting 7 from each element:\n\n\n\nCode\nabs(seq1 - 7)\n\n\n[1] 4 3 5 9 2\n\n\n\nNatural logarithm of each element:\n\n\n\nCode\nlog(seq1)\n\n\n[1] 1.098612 1.386294 2.484907 2.772589 1.609438\n\n\n(b) Take-home:\nGiven the sequence seq2 &lt;- c(8, 14, 7, 5, 9):\n\nFactorial of each element:\n\n\n\nCode\nseq2 &lt;- c(8, 14, 7, 5, 9)\nfactorial(seq2)\n\n\n[1]       40320 87178291200        5040         120      362880\n\n\n\nThe exponential value of each element:\n\n\n\nCode\nexp(seq2)\n\n\n[1]    2980.9580 1202604.2842    1096.6332     148.4132    8103.0839\n\n\n\nTrigonometric sine of each element:\n\n\n\nCode\nsin(seq2)\n\n\n[1]  0.9893582  0.9906074  0.6569866 -0.9589243  0.4121185\n\n\n\nQuestion 2: Basic Statistics\n(a) In-class:\nGiven the sequence data1 &lt;- c(2, 4, 6, 8, 10):\n\nMean value:\n\n\n\nCode\ndata1 &lt;- c(2, 4, 6, 8, 10)\nmean(data1)\n\n\n[1] 6\n\n\n\nMedian value:\n\n\n\nCode\nmedian(data1)\n\n\n[1] 6\n\n\n\nStandard deviation:\n\n\n\nCode\nsd(data1)\n\n\n[1] 3.162278\n\n\n(b) Take-home:\nGiven the sequence data2 &lt;- c(3, 5, 8, 9, 12):\n\nVariance:\n\n\n\nCode\ndata2 &lt;- c(3, 5, 8, 9, 12)\nvar(data2)\n\n\n[1] 12.3\n\n\n\nMinimum and maximum values:\n\n\n\nCode\nmin(data2)\n\n\n[1] 3\n\n\n\n\nCode\nmax(data2)\n\n\n[1] 12\n\n\n\nThe 1st quantile (25th percentile):\n\n\n\nCode\nquantile(data2, 0.25)\n\n\n25% \n  5 \n\n\n\nQuestion 3: Matrix Calculation\n(a) In-class:\nGiven the matrices:\n\n\nCode\nmatA = matrix(c(2, 3, 1, 5), nrow=2)\nmatB = matrix(c(1, 0, 2, 4), nrow=2)\n\n\n\nMatrix addition between matA and matB:\n\n\n\nCode\nmatA + matB\n\n\n     [,1] [,2]\n[1,]    3    3\n[2,]    3    9\n\n\n\nElement-wise multiplication between matA and matB:\n\n\n\nCode\nmatA * matB\n\n\n     [,1] [,2]\n[1,]    2    2\n[2,]    0   20\n\n\n\nTranspose matA:\n\n\n\nCode\nt(matA)\n\n\n     [,1] [,2]\n[1,]    2    3\n[2,]    1    5\n\n\n(b) Take-home:\n\nMatrix multiplication between matA and matB:\n\n\n\nCode\nmatA %*% matB\n\n\n     [,1] [,2]\n[1,]    2    8\n[2,]    3   26\n\n\n\nDeterminant of matA:\n\n\n\nCode\ndet(matA)\n\n\n[1] 7\n\n\n\nEigenvalues of matA:\n\n\n\nCode\neigen(matA)$values\n\n\n[1] 5.791288 1.208712\n\n\n\nChallenging Question:\nGiven the matrices:\n\n\nCode\nmatX = matrix(c(4, 3, 2, 1), nrow=2)\nmatY = matrix(c(1, 2, 3, 4), nrow=2)\n\n\n\nMatrix product of matX and matY versus matY and matX:\n\n\n\nCode\nmatX %*% matY\n\n\n     [,1] [,2]\n[1,]    8   20\n[2,]    5   13\n\n\n\n\nCode\nmatY %*% matX\n\n\n     [,1] [,2]\n[1,]   13    5\n[2,]   20    8\n\n\nAs these results are not equal, the matrix product is not commutative for matX and matY."
  },
  {
    "objectID": "lec1.html#list",
    "href": "lec1.html#list",
    "title": "Lecture 1",
    "section": "3.4 List",
    "text": "3.4 List\nLists in R are a type of data structure that allow you to store elements of different types (e.g., numbers, strings, vectors, and even other lists). Here’s a comprehensive tutorial on using lists in R:\n\n\n3.4.1 How to create a new List\nTo create a list in R, you can use the list() function. Here’s how:\n\n\nCode\n# Create a list containing a number, a character string, and a vector\nmy_list &lt;- list(age = 25, name = \"John\", scores = c(85, 90, 95))\nmy_list\n\n\n$age\n[1] 25\n\n$name\n[1] \"John\"\n\n$scores\n[1] 85 90 95\n\n\nThe above code creates a list my_list with three elements: an age, a name, and a vector of scores.\n\n\n\n3.4.2 How to modify and add elements to a List\nYou can modify an existing list element or add a new element by using the [[ ]] operator.\n\n\nCode\n# Modify the age\nmy_list[[1]] &lt;- 26\n\n# Add a new element, address\nmy_list$address &lt;- \"123 R Street\"\n\nmy_list\n\n\n$age\n[1] 26\n\n$name\n[1] \"John\"\n\n$scores\n[1] 85 90 95\n\n$address\n[1] \"123 R Street\"\n\n\nIn this example, the age is modified, and a new element address is added to the list.\n\n\n\n3.4.3 How to access elements in a List\nTo access elements in a list, you can use either the [[ ]] operator or the $ operator:\n\n\nCode\n# Access the name using double square brackets\nperson_name &lt;- my_list[[2]]\n\n# Access scores using the dollar sign\ntest_scores &lt;- my_list$scores\n\nperson_name\n\n\n[1] \"John\"\n\n\nCode\ntest_scores\n\n\n[1] 85 90 95\n\n\nHere, the second element of my_list (name) is accessed using [[ ]], and the scores are accessed using $.\n\n\n\n3.4.4 How to remove elements from a List\nYou can remove an element from a list by setting it to NULL:\n\n\nCode\n# Remove the address element\nmy_list$address &lt;- NULL\n\nmy_list\n\n\n$age\n[1] 26\n\n$name\n[1] \"John\"\n\n$scores\n[1] 85 90 95\n\n\nThe element address is removed from the list in this example.\n\nRemember, lists are versatile and can hold heterogeneous data, making them crucial for various applications in R, especially when you need to organize and structure diverse data types.\n\n\n3.4.5 Exercise: List\n\nQuestionsSolution\n\n\n\nQuestion 1: Creating and Modifying Lists\n(a) In-class:\n\nCreate a list named student_info containing the following elements:\n\nname: “Alice”\nage: 20\nsubjects: a vector with “Math”, “History”, “Biology”\n\nDisplay the created list.\n\n(b) Take-home:\n\nAdd two more elements to the student_info list:\n\ngrades: a vector with scores 90, 85, 88 corresponding to the subjects.\naddress: “123 Main St”\n\nDisplay the updated list.\n\n\nQuestion 2: Accessing and Analyzing List Elements\n(a) In-class:\n\nFrom the student_info list, extract and print:\n\nThe name of the student.\nThe subjects they are studying.\n\n\n(b) Take-home:\n\nCalculate and display:\n\nThe average grade of the student using the grades element from the list.\nThe number of subjects the student is studying.\n\n\n\nQuestion 3: Nested Lists\n(a) In-class:\n\nCreate a nested list named school_info with the following structure:\n\nschool_name: “Greenwood High”\nstudents: a list containing two elements:\n\nstudent1: the student_info list you created in Question 1.\nstudent2: a new list with name as “Bob”, age as 22, and subjects with “Physics”, “Math”, “English”.\n\n\nDisplay the created nested list.\n\n(b) Take-home:\n\nAdd a new student, student3, to the students list in school_info with your own details. Display the updated school_info list.\n\n\nChallenging Question:\nGiven the school_info list:\n\nWrite a function named get_average_grade that takes in the school_info list and a student name as arguments. The function should return the average grade for the given student. If the student does not exist in the list or has no grades, return an appropriate message. Test your function with student1, student2, and another name not in the list.\n\n\n\n\nQuestion 1: Creating and Modifying Lists\n(a) In-class:\n\n\nCode\n# Creating the student_info list\nstudent_info &lt;- list(\n  name = \"Alice\",\n  age = 20,\n  subjects = c(\"Math\", \"History\", \"Biology\")\n)\n\n# Displaying the created list\nstudent_info\n\n\n$name\n[1] \"Alice\"\n\n$age\n[1] 20\n\n$subjects\n[1] \"Math\"    \"History\" \"Biology\"\n\n\n(b) Take-home:\n\n\nCode\n# Adding more elements to the list\nstudent_info$grades &lt;- c(90, 85, 88)\nstudent_info$address &lt;- \"123 Main St\"\n\n# Displaying the updated list\nstudent_info\n\n\n$name\n[1] \"Alice\"\n\n$age\n[1] 20\n\n$subjects\n[1] \"Math\"    \"History\" \"Biology\"\n\n$grades\n[1] 90 85 88\n\n$address\n[1] \"123 Main St\"\n\n\n\nQuestion 2: Accessing and Analyzing List Elements\n(a) In-class:\n\n\nCode\n# Extracting and printing the name and subjects\nstudent_name &lt;- student_info$name\nstudent_subjects &lt;- student_info$subjects\n\nstudent_name\n\n\n[1] \"Alice\"\n\n\nCode\nstudent_subjects\n\n\n[1] \"Math\"    \"History\" \"Biology\"\n\n\n(b) Take-home:\n\n\nCode\n# Calculating the average grade\naverage_grade &lt;- mean(student_info$grades)\n\n# Counting the number of subjects\nnum_subjects &lt;- length(student_info$subjects)\n\naverage_grade\n\n\n[1] 87.66667\n\n\nCode\nnum_subjects\n\n\n[1] 3\n\n\n\nQuestion 3: Nested Lists\n(a) In-class:\n\n\nCode\n# Creating the nested list school_info\nschool_info &lt;- list(\n  school_name = \"Greenwood High\",\n  students = list(\n    student1 = student_info,\n    student2 = list(name = \"Bob\", age = 22, subjects = c(\"Physics\", \"Math\", \"English\"))\n  )\n)\n\n# Displaying the created nested list\nschool_info\n\n\n$school_name\n[1] \"Greenwood High\"\n\n$students\n$students$student1\n$students$student1$name\n[1] \"Alice\"\n\n$students$student1$age\n[1] 20\n\n$students$student1$subjects\n[1] \"Math\"    \"History\" \"Biology\"\n\n$students$student1$grades\n[1] 90 85 88\n\n$students$student1$address\n[1] \"123 Main St\"\n\n\n$students$student2\n$students$student2$name\n[1] \"Bob\"\n\n$students$student2$age\n[1] 22\n\n$students$student2$subjects\n[1] \"Physics\" \"Math\"    \"English\"\n\n\n(b) Take-home:\n\n\nCode\n# Adding student3 to the students list\nschool_info$students$student3 &lt;- list(name = \"Charlie\", age = 23, subjects = c(\"Chemistry\", \"Music\", \"Art\"))\n\n# Displaying the updated school_info list\nschool_info\n\n\n$school_name\n[1] \"Greenwood High\"\n\n$students\n$students$student1\n$students$student1$name\n[1] \"Alice\"\n\n$students$student1$age\n[1] 20\n\n$students$student1$subjects\n[1] \"Math\"    \"History\" \"Biology\"\n\n$students$student1$grades\n[1] 90 85 88\n\n$students$student1$address\n[1] \"123 Main St\"\n\n\n$students$student2\n$students$student2$name\n[1] \"Bob\"\n\n$students$student2$age\n[1] 22\n\n$students$student2$subjects\n[1] \"Physics\" \"Math\"    \"English\"\n\n\n$students$student3\n$students$student3$name\n[1] \"Charlie\"\n\n$students$student3$age\n[1] 23\n\n$students$student3$subjects\n[1] \"Chemistry\" \"Music\"     \"Art\"      \n\n\n\nChallenging Question:\n\n\nCode\n# Function to get the average grade of a student\nget_average_grade &lt;- function(school_info, student_name) {\n  student_data &lt;- school_info$students[[student_name]]\n  if (!is.null(student_data) && !is.null(student_data$grades)) {\n    return(mean(student_data$grades))\n  } else {\n    return(paste(\"No grades found for\", student_name))\n  }\n}\n\n# Testing the function\nget_average_grade(school_info, \"student1\")\n\n\n[1] 87.66667\n\n\nCode\nget_average_grade(school_info, \"student2\")\n\n\n[1] \"No grades found for student2\"\n\n\nCode\nget_average_grade(school_info, \"John\")\n\n\n[1] \"No grades found for John\""
  },
  {
    "objectID": "lec1.html#data-frame",
    "href": "lec1.html#data-frame",
    "title": "Lecture 1",
    "section": "3.5 Data Frame",
    "text": "3.5 Data Frame\nA data frame is a table-like structure that stores data in rows and columns. Each column in a data frame can be of a different data type (e.g., numeric, character, factor), but all elements within a column must be of the same type. This makes data frames ideal for representing datasets.\n\n3.5.1 Creating a Data Frame\nData frames can be created using the data.frame() function.\n\n\nCode\n# Example\nstudents &lt;- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Age = c(20, 21, 19),\n  Grade = c(\"A\", \"B\", \"A\")\n)\n\nprint(students)\n\n\n     Name Age Grade\n1   Alice  20     A\n2     Bob  21     B\n3 Charlie  19     A\n\n\n\n\n3.5.2 Accessing Data in Data Frames (Indexing)\nIn R, data frames are similar to tables in that they store data in rows and columns. Each row represents an observation and each column a variable. Indexing in data frames refers to accessing specific rows, columns, or cells of the data frame.\n\nBy Column Name\nYou can access the data of a specific column using the $ operator or double square brackets.\n\n\nCode\n# Creating a sample data frame\ndf &lt;- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Age = c(20, 21, 19),\n  Grade = c(\"A\", \"B\", \"A\")\n)\n\n# Accessing the 'Name' column using the `$` operator\nnames &lt;- df$Name\nprint(names)\n\n\n[1] \"Alice\"   \"Bob\"     \"Charlie\"\n\n\nCode\n# Accessing the 'Age' column using double square brackets\nages &lt;- df[[\"Age\"]]\nprint(ages)\n\n\n[1] 20 21 19\n\n\n\n\nBy Column Index\nYou can also access a column by its numeric index.\n\n\nCode\n# Accessing the first column\nfirst_column &lt;- df[,1]\nprint(first_column)\n\n\n[1] \"Alice\"   \"Bob\"     \"Charlie\"\n\n\n\n\nBy Row Index\nYou can access specific rows using their numeric indices.\n\n\nCode\n# Accessing the first and third rows\nrows_1_and_3 &lt;- df[c(1,3), ]\nprint(rows_1_and_3)\n\n\n     Name Age Grade\n1   Alice  20     A\n3 Charlie  19     A\n\n\n\n\nBy Row and Column Indices\nYou can access a specific cell of the data frame using its row and column indices.\n\n\nCode\n# Accessing the age of the second student\nage_of_second &lt;- df[2, 2]\nprint(age_of_second)\n\n\n[1] 21\n\n\n\n\nBy Row and Column Names\nYou can also use row and column names to access specific cells. Note: By default, data frames in R do not have row names unless explicitly set.\n\n\nCode\n# Setting row names for our data frame\nrownames(df) &lt;- c(\"Student1\", \"Student2\", \"Student3\")\n\n# Accessing the grade of the third student using row and column names\ngrade_of_third &lt;- df[\"Student3\", \"Grade\"]\nprint(grade_of_third)\n\n\n[1] \"A\"\n\n\n\n\n\n\n3.5.3 Modifying a Data Frame\nWe will talk more about this section in the Data Cleaning Session. But we can see an example on columns manipulation:\n\n\nCode\n# Adding a new column\nstudents$Major &lt;- c(\"Math\", \"Biology\", \"Physics\")\nprint(students)\n\n\n     Name Age Grade   Major\n1   Alice  20     A    Math\n2     Bob  21     B Biology\n3 Charlie  19     A Physics\n\n\nCode\n# Modifying a column\nstudents$Age &lt;- students$Age + 1\nprint(students)\n\n\n     Name Age Grade   Major\n1   Alice  21     A    Math\n2     Bob  22     B Biology\n3 Charlie  20     A Physics\n\n\nCode\n# Removing a column\nstudents$Major &lt;- NULL\nprint(students)\n\n\n     Name Age Grade\n1   Alice  21     A\n2     Bob  22     B\n3 Charlie  20     A\n\n\n\n\n3.5.4 Useful Functions for Data Frames\nHere are some functions that are particularly useful when working with data frames:\n\nhead(df): Displays the first six rows of the data frame df.\ntail(df): Displays the last six rows of the data frame df.\nstr(df): Provides a structured overview of the data frame df, showing the data types of each column and the first few entries of each column.\ndim(df): Returns the dimensions (number of rows and columns) of the data frame df.\nsummary(df): Provides a statistical summary of each column in the data frame df.\n\n\n\n\n3.5.5 Load and Save Data Frames in R\nHandling data is one of the most essential aspects of data analysis in R. In this section, we’ll explore how to load data into R from external sources and save it for future use.\n\nRead a CSV File\nTo read a CSV (Comma-Separated Values) file and store its contents as a data frame, use the read.csv() function.\n\n\nCode\n# Load a CSV file into a data frame\ndf &lt;- read.csv(\"path_to_file.csv\")\n\n# Display the first few rows of the data frame\nhead(df)\n\n\n\n\nSaving to CSV Files\nTo save a data frame to a CSV file, use the write.csv() function.\n\n\nCode\n# Save a data frame to a CSV file\nwrite.csv(df_csv, \"path_to_output_file.csv\", row.names = FALSE)\n\n# Note: `row.names = FALSE` ensures that row names are not written to the CSV.\n\n\n\n\nLoading Data Frames from Excel Files\nTo work with Excel files, you might need external packages like readxl and writexl. Steps should be:\n\nInstall and load the haven package:install.packages(\"readxl\")\nLoad the library: library(readxl)\nUse data using: df_excel &lt;- read_excel(\"path_to_file.xlsx\")\n\n\n\nLoading Data Frames from STATA’s .dta File\nTo read .dta files from Stata into R, follow these steps:\n\nInstall and load the haven package:install.packages(\"haven\")\nLoad the library: library(haven)\nUse data using: df_dta &lt;- read_dta(\"path_to_file.dta\")"
  },
  {
    "objectID": "lec1.html#introduction-1",
    "href": "lec1.html#introduction-1",
    "title": "Lecture 1",
    "section": "5.1 Introduction",
    "text": "5.1 Introduction\nIn this challenge project, you will demonstrate your understanding of the basic data types, structures in R, and manipulate built-in data sets to gain insights. This project will test your proficiency in accessing values in vectors, matrices, lists, and data frames, performing basic operations, and saving & reading data frames."
  },
  {
    "objectID": "lec1.html#dataset",
    "href": "lec1.html#dataset",
    "title": "Lecture 1",
    "section": "5.2 Dataset",
    "text": "5.2 Dataset\nWe will use the built-in dataset mtcars. This data was extracted from the 1974 Motor Trend US magazine and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973-74 models)."
  },
  {
    "objectID": "lec1.html#tasks",
    "href": "lec1.html#tasks",
    "title": "Lecture 1",
    "section": "5.3 Tasks",
    "text": "5.3 Tasks\n\n5.3.1 Basic Data Types and Structures\n(a) Vectors\n\nCreate a numeric vector that represents the miles per gallon (mpg) of the mtcars dataset.\nCalculate and print the average mpg.\nAccess and print the mpg of the 10th car.\n\n(b) Matrices\n\nConvert the first 5 rows and 3 columns of the mtcars dataset into a matrix.\nPerform a matrix operation: Multiply the above matrix by 2 and print the result.\n\n(c) Lists\n\nCreate a list that contains:\n\nA numeric vector of horsepower (hp) of the cars.\nA character vector of car model names.\n\nAccess and print the name of the 5th car from the list.\n\n\n\n5.3.2 Data Frame Operations\n\nAccess and print the details of the car with the highest horsepower.\nSave this single-row data frame to a CSV file named “high_hp_car.csv”.\nRead the “high_hp_car.csv” file back into R and print its contents to confirm the saved data.\n\n\n\n5.3.3 Comprehensive Exploration\n\nFilter cars that have an mpg greater than 20 and less than 6 cylinders.\nFor these filtered cars, calculate:\n\nThe average horsepower.\nThe median weight.\nThe number of cars with manual transmission (am column value is 1).\n\n\n\n\n5.3.4 Challenge Question!\n\nCreate a matrix of dimensions 3x3 using the mpg, hp, and wt (weight) columns for the first three cars.\nInvert this matrix. (Hint: You can use the solve() function.)\nCheck if the matrix is singular before inversion (its determinant should not be zero)."
  },
  {
    "objectID": "lec1.html#deliverables",
    "href": "lec1.html#deliverables",
    "title": "Lecture 1",
    "section": "5.4 Deliverables",
    "text": "5.4 Deliverables\n\nAn R script containing all the operations performed and any auxiliary functions created.\nThe “high_hp_car.csv” file.\n(Optional) A brief report generated by rmd with output (in html PDF file)."
  },
  {
    "objectID": "lec1.html#solutions",
    "href": "lec1.html#solutions",
    "title": "Lecture 1",
    "section": "5.5 Solutions",
    "text": "5.5 Solutions\nYou can find the solution here."
  },
  {
    "objectID": "lec1.html#math-operations",
    "href": "lec1.html#math-operations",
    "title": "Lecture 1",
    "section": "6.1 Math Operations",
    "text": "6.1 Math Operations\n\n\n\n\n\n\n\n\n\nFunction\nDescription\nExample\nResult\n\n\n\n\nsqrt()\nSquare root\nsqrt(9)\n3\n\n\nabs()\nAbsolute value\nabs(-10)\n10\n\n\nlog()\nNatural logarithm (base e)\nlog(2.72)\n1\n\n\nlog10()\nLogarithm base 10\nlog10(100)\n2\n\n\nexp()\nExponential function (base e)\nexp(1)\n2.71828 (approximately e)\n\n\nfactorial()\nFactorial of a number\nfactorial(4)\n24\n\n\n^\nExponentiation\n2^3\n8\n\n\nround()\nRounds a number\nround(2.678, 2)\n2.68\n\n\nceiling()\nRounds up to the nearest integer\nceiling(2.1)\n3\n\n\nfloor()\nRounds down to the nearest integer\nfloor(2.9)\n2\n\n\ntrunc()\nRemoves the decimal part\ntrunc(2.9)\n2\n\n\nsin(), cos(), tan()\nTrigonometric functions\nsin(pi/2)\n1"
  },
  {
    "objectID": "lec1.html#basic-statistical-operations",
    "href": "lec1.html#basic-statistical-operations",
    "title": "Lecture 1",
    "section": "6.2 Basic Statistical Operations",
    "text": "6.2 Basic Statistical Operations\n\n\n\n\n\n\n\n\n\nFunction\nDescription\nExample\nResult\n\n\n\n\nmean()\nArithmetic mean (average)\nmean(c(1, 2, 3, 4, 5))\n3\n\n\nmedian()\nMedian (middle value)\nmedian(c(1, 3, 5, 7, 9))\n5\n\n\nsd()\nStandard deviation\nsd(c(1, 2, 3, 4, 5))\n1.5811\n\n\nvar()\nVariance\nvar(c(1, 2, 3, 4, 5))\n2.5\n\n\nmin()\nMinimum value\nmin(c(2, 5, 1, 8, 7))\n1\n\n\nmax()\nMaximum value\nmax(c(2, 5, 1, 8, 7))\n8\n\n\nrange()\nRange (min and max)\nrange(c(2, 5, 1, 8, 7))\n1, 8\n\n\nsum()\nSum of values\nsum(c(1, 2, 3, 4, 5))\n15\n\n\nquantile()\nQuantiles (e.g., quartiles)\nquantile(c(1, 2, 3, 4, 5), 0.25)\n1.5\n\n\ncor()\nCorrelation coefficient\ncor(c(1, 2, 3), c(3, 2, 1))\n-1\n\n\ncov()\nCovariance\ncov(c(1, 2, 3), c(3, 2, 1))\n-1\n\n\ntable()\nFrequency table of factors\ntable(c(\"A\", \"A\", \"B\", \"B\", \"C\"))\nA: 2, B: 2, C: 1\n\n\nprop.table()\nProportional table\nprop.table(table(c(\"A\", \"A\", \"B\", \"B\", \"C\")))\nA: 0.4, B: 0.4, C: 0.2"
  },
  {
    "objectID": "lec1.html#vector-operations",
    "href": "lec1.html#vector-operations",
    "title": "Lecture 1",
    "section": "6.3 Vector Operations",
    "text": "6.3 Vector Operations\n\n\n\n\n\n\n\nDescription\nCode\n\n\n\n\nCreate a sequence\nnums = 2:6\n\n\nGenerate repeated numbers\nsevens = rep(7, times=5)\n\n\nRepeat a string\nvec_hello = rep(\"Hello\", times = 7)\n\n\nRepeat a string multiple times\nvec_hello_20 = rep(vec_hello, times = 2)\n\n\nSequence with incremental steps\nvec_range = seq(from = 3.2, to = 4.5, by = 0.2)\n\n\nInitialize a zero vector\noutputs = integer(length=7)\n\n\nCombine vectors\nvec_merge = c(nums, rep(seq(2, 6, 2), 2), c(2, 3, 5), 77, 5:3)\n\n\nCheck vector length\nlength(vec_merge)\n\n\nAccess the first value\nvec2[1]\n\n\nOmit the first value\nvec2[-1]\n\n\nAccess elements using an index range\nvec2[2:4]\n\n\nSelect specific elements\nvec2[c(2,3,6)]\n\n\nAdd a scalar to a vector\nvec2 + 2\n\n\nMultiply all elements by a scalar\n3 * vec2\n\n\nCompute square root\nsqrt(vec2)\n\n\nAdd two vectors\nvec2 + 3*vec2\n\n\nCompare vector with a scalar\nvec2 &gt; 4\n\n\nCheck if vector contains an exact value\nvec2 == 3\n\n\nLogical AND condition\nvec2 &gt; 3 & vec2!=4\n\n\nLogical OR condition\nvec2 &gt; 3 | vec2!=5\n\n\nFilter elements based on a condition\nvec2[vec2&gt;4]\n\n\nIndex of elements that meet a condition\nwhich(vec2&gt;6)\n\n\nLargest element in vector\nmax(vec2)\n\n\nIndex of largest element\nwhich.max(vec2)\n\n\nSmallest element in vector\nmin(vec2)\n\n\nIndex of smallest element\nwhich.min(vec2)\n\n\nSum of all elements in a vector\nsum(vec2)\n\n\nProduct of all elements in a vector\nprod(vec2)\n\n\nMean value of a vector\nmean(vec2)\n\n\nMedian value of a vector\nmedian(vec2)"
  },
  {
    "objectID": "lec1.html#matrix-operation",
    "href": "lec1.html#matrix-operation",
    "title": "Lecture 1",
    "section": "6.4 Matrix Operation",
    "text": "6.4 Matrix Operation\n\n\n\n\n\n\n\n\n\nOperation\nSymbol/Function\nDescription\nExample\n\n\n\n\nMatrix Addition\n+\nElement-wise addition of two matrices\nmat1 + mat2\n\n\nMatrix Subtraction\n-\nElement-wise subtraction of two matrices\nmat1 - mat2\n\n\nElement-wise Multiplication\n*\nMultiplies each element of one matrix with the corresponding element of another\nmat1 * mat2\n\n\nMatrix Multiplication\n%*%\nStandard matrix multiplication\nmat1 %*% mat2\n\n\nMatrix Transposition\nt()\nTransposes a matrix (rows become columns and vice versa)\nt(mat1)\n\n\nMatrix Inversion\nsolve()\nInverts a matrix (only for square matrices)\nsolve(mat1)\n\n\nDeterminant\ndet()\nCalculates the determinant of a matrix\ndet(mat1)\n\n\nEigenvalues and Eigenvectors\neigen()\nCalculates the eigenvalues and eigenvectors of a matrix\neigen(mat1)"
  },
  {
    "objectID": "lec0.html",
    "href": "lec0.html",
    "title": "Lecture 0",
    "section": "",
    "text": "Let us firstly set up our R programming environment and have an overview of Rstudio.\n\n\nPlease follow the instruction of this link to download and install R and Rstudio.\n\n\n\n\nR is a language and environment for statistical computing and graphics.\nRStudio is an integrated development environment for R.\n\n\n\n\nThere are four main windows in Rstudio.\n\nThe Console window\n\n\n\nThe Source window: Here is place we normally write our code.\n\n\n\nThe Environment / History / Connections / Tutorial window: Right now it is empty, because we have not loaded any data yet. Here is the place, we can see some data frames, functions, and vectors.\n\n\n\nThe Files / Plots / Packages / Help / Viewer window: You can see your file path, plots, etc. in this window."
  },
  {
    "objectID": "lec0.html#r-script",
    "href": "lec0.html#r-script",
    "title": "Lecture 0",
    "section": "2.1 R script",
    "text": "2.1 R script\nYou always need yourself and your collaborator know what is your script about. So, please define some basic information for your R script. The following is an example I use.\n\n\nCode\n#____________________________\n#  Script Information----\n#____________________________\n##\n## Script Title: Introduction to R Statistical Software\n##\n## Task: Lecture 0\n##\n## Author: Lifeng Ren\n##\n## Date Last Modified: 2023-08-14\n##\n## Date Created: 2023-08-14\n##\n## Copyright (c) Lifeng Ren, 2023\n## Email: ren00154@umn.edu\n##\n## ___________________________\n##\n## Version: V1.0 (2023-08-14)\n##   \n## Version Notes: Initial Efforts\n## ___________________________\n\n\nYou can create RStudio headers (that can be tracked by Rstudio) using the\n\nWindows: Ctrl + Shift + R\nMac OS: Command + Shift + R\n\nIf you test and try a little bit you would find that R can track and of the following format: #+ space + your section name + ---- (four dashes).\n\n\nCode\n# This is a default R section -------------------------------\n\n#____________________________________________   This is `underscore`\n#  Single has tag will not bold the words----   This is `dash`\n#____________________________________________   This is `underscore`\n\n#__________________________________________\n##  Double hash tag will bold the words----   \n#__________________________________________"
  },
  {
    "objectID": "lec0.html#r-markdown",
    "href": "lec0.html#r-markdown",
    "title": "Lecture 0",
    "section": "2.2 R Markdown",
    "text": "2.2 R Markdown\nMarkdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. .Rmd is the abbreviation for R Markdown file and for more a complete R markdown reference, I personally recommend you this user guide, and official documentation on http://rmarkdown.rstudio.com to know the full picture of R markdown.\n\nShort note: For the students taking APEC8211 - APEC8212, you need to hand in the Homework in a typed format. So, learning code in Rmd would be good to save you time.\n\nIn this class we are going to go over some very basic knowledge of R Markdown.\n\nFirst, you have the opportunity to edit your page style and header, which is called a YAML header, the following is an example of my own YAML header for this class.\n\n\n\nCode\n---\ntitle: \"Lecture 1: R-Review-2023\"\nauthor: \"Lifeng Ren\"\ndate: \"`r Sys.Date()`\"\noutput: \n  html_document:\n    theme: united\n    toc: true\n    toc_float: true\n    toc_depth: 2\n    highlight: tango\n    df_print: paged\n    mathjax: local\n    self_contained: false\n    number_sections: true\n    fig_width: 7\n    fig_height: 6\n    fig_caption: true\n    code_folding: hide\n---\n\n\nIn the Rmd documentation, we have two main things:\n\nMarkdown Document\n\nMath: use the $ sign, and the mathematical equations coding style should be the same for LaTex.\n\nFor example: The probability density function of a normal distribution could be typed as: $f(x)=\\frac{1}{\\sigma \\sqrt{2 \\pi}} e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}$, and Rmd will show the and inline output: \\(f(x)=\\frac{1}{\\sigma \\sqrt{2 \\pi}} e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}\\). Using $$ instead of the single $, will have the following output.\n\\[\n    f(x)=\\frac{1}{\\sigma \\sqrt{2 \\pi}} e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}\n  \\]\n\nHyperlink: [This is the TEXT](This is the LINK). Please use the source code of this document to see the example.\nFor other Markdown coding documentation, please refer to: R Markdown Cookbook\n\nCode Chunk (mainly should be R, but can also be customized)\nThe code chunk normally starts with r, and follows by the chunk name you defined, and then put the chunk environment after it. For example:\n\n\n\nCode\n  ```{r, chunkexample, eval=FALSE}\n    summary(cars)\n  ``` #Example\n\n\nAccording to the online documentation of R Markdown:\n\nUsing include = FALSE hides both the code and its output in the final document. However, R Markdown still executes the code in the chunk, making the results accessible to subsequent chunks.\nSetting echo = FALSE ensures only the code is hidden, while its output remains visible in the final document. It’s particularly handy for displaying visuals without the accompanying code.\nIf you want to hide messages produced by the code, use message = FALSE.\nTo suppress warnings from being displayed in the final output, employ warning = FALSE.\nAdd a caption to images or plots using fig.cap = “…”.\nTo skip the execution of a particular code chunk altogether, use eval = FALSE.\nYou can also use knitr::opts_chunk$set(ANY OPTIONS ABOVE) like below to set a global environment for all code chunks like this:\n\n\nCode\nknitr::opts_chunk$set(echo = TRUE)\n\n\n\nMore coding details in Rmd should be reviewed using the source code I provided."
  },
  {
    "objectID": "lec0.html#coding-style",
    "href": "lec0.html#coding-style",
    "title": "Lecture 0",
    "section": "2.3 Coding Style",
    "text": "2.3 Coding Style\nWe are not professional programmer, but coding habitat is super important. Here are some most important parts I think you should be careful of.\n\n2.3.1 Naming\n\nPlease name your variables in either the following way, and being consistent:\n\nMyVariable\nmy_variable\nmy.variable\n\nDo not start a name with numbers like: 2023badname\nDo not include illegal characters like: 2023/%badname\n\n\n\n2.3.2 Comments\n\nRemind yourself and other collaborators with comments in addition to headers.\nFor example:\n\n\n\nCode\n    #__________________________________________\n    ##  Comments Your Code is Important----   \n    #__________________________________________\n    \n    mean(x) # You might not need to generate comments for a simple function\n    \n    \n    # A function to generate the Fibonacci sequence\n    fibonacci &lt;- function(n) { # but for a complex function you need more comments\n      if (n &lt;= 0) {\n        return(integer(0))  # return an empty integer vector for non-positive n\n      } else if (n == 1) {\n        return(0)\n      } else if (n == 2) {\n        return(c(0, 1))\n      } else {\n        fib_sequence &lt;- c(0, 1)\n        for (i in 3:n) {\n          next_element &lt;- sum(tail(fib_sequence, 2))\n          fib_sequence &lt;- c(fib_sequence, next_element)\n      }\n      return(fib_sequence)\n      }\n    }\n\n    # Print the first 10 numbers of the Fibonacci sequence\n    print(fibonacci(10))\n\n\n\n\n2.3.3 Most used Built-in Symbols and Command\n\n\n\n\n\n\n\n\nSymbol\nDefinition\nExample\n\n\n\n\n=\nAssigns within functions/datasets.\nfun(arg = value)\n\n\n&lt;-\nAssigns values to objects/datasets.\nobj &lt;- 2 (shortcut: Mac: cmd+ -; Win: ctrl+-)\n\n\n==\nChecks equality.\nobj == 2 checks if obj equals 2.\n\n\n!=\nChecks inequality.\nobj != 2 checks if obj isn’t 2.\n\n\n&gt;\nGreater than.\nobj &gt; 2 checks if obj is more than 2.\n\n\n&lt;\nLess than.\nobj &lt; 2 checks if obj is less than 2.\n\n\n&gt;=\nGreater than or equal to.\nobj &gt;= 2\n\n\n&lt;=\nLess than or equal to.\nobj &lt;= 2\n\n\n!\nNOT (logical negation).\n!TRUE returns FALSE.\n\n\n&\nAND (element-wise).\nc(TRUE, FALSE) & c(TRUE, TRUE) returns TRUE, FALSE.\n\n\n\\|\nOR (element-wise).\nc(TRUE, FALSE) \\| c(FALSE, FALSE) returns TRUE, FALSE.\n\n\n&&\nAND (first element).\nTRUE && FALSE returns FALSE.\n\n\n\\|\\|\nOR (first element).\nTRUE \\|\\| FALSE returns TRUE.\n\n\n%in%\nTests if in a set.\n2 %in% c(1, 2, 3) returns TRUE.\n\n\n\nWe will see them more often in the next couple sessions."
  },
  {
    "objectID": "lec0.html#in-class-exercise",
    "href": "lec0.html#in-class-exercise",
    "title": "Lecture 0",
    "section": "2.4 In-class exercise",
    "text": "2.4 In-class exercise\nNow, let us go to Rstudio and play with what we have learned.\n\nDownload the files\n\n\nCreate a folder in your local computer for the this class, preferably named as: R_Review_2023\nDownload the lec1 folder/zip file under R_Review_2023 from Canvas or GitHub Repository\nOpen lec1_stu.R: Change the Script Information with your own names, date, …\n\n\nprint: “Hello World”\n\n\nIn the source window, type the following code and select the sentence and click on Run\n\n\nCode\n  print(\"Hello World!\")\n\n\n[1] \"Hello World!\"\n\n\nType the same thing in the Console window, and hit enter.\nGet Help with any functions like print: ?print()\n\n\nCode\n  ?print()\n\n\n\n\nAssign a char value to hello using the following code and see the change in the envrionemt window. Then, print out hello.\n\n\n\nCode\n  hello &lt;- \"Hello World!\"\n  print(hello)\n\n\n[1] \"Hello World!\""
  },
  {
    "objectID": "lec0.html#install-r-and-rstudio",
    "href": "lec0.html#install-r-and-rstudio",
    "title": "Lecture 0",
    "section": "",
    "text": "Please follow the instruction of this link to download and install R and Rstudio."
  },
  {
    "objectID": "lec0.html#what-is-r-and-rstudio",
    "href": "lec0.html#what-is-r-and-rstudio",
    "title": "Lecture 0",
    "section": "",
    "text": "R is a language and environment for statistical computing and graphics.\nRStudio is an integrated development environment for R."
  },
  {
    "objectID": "lec0.html#go-over-the-interface-of-rstudio",
    "href": "lec0.html#go-over-the-interface-of-rstudio",
    "title": "Lecture 0",
    "section": "",
    "text": "There are four main windows in Rstudio.\n\nThe Console window\n\n\n\nThe Source window: Here is place we normally write our code.\n\n\n\nThe Environment / History / Connections / Tutorial window: Right now it is empty, because we have not loaded any data yet. Here is the place, we can see some data frames, functions, and vectors.\n\n\n\nThe Files / Plots / Packages / Help / Viewer window: You can see your file path, plots, etc. in this window."
  },
  {
    "objectID": "lec4.html",
    "href": "lec4.html",
    "title": "Lecture 4",
    "section": "",
    "text": "Lecture 2 and Lecture 3’s link is now available on GitHub\nLecture 3’s project solution has been updated.\nAny Questions? Comments? Suggestions?"
  },
  {
    "objectID": "lec4.html#matrix-caculations-warm-up-and-review",
    "href": "lec4.html#matrix-caculations-warm-up-and-review",
    "title": "Lecture 4",
    "section": "4.1 Matrix Caculations (Warm up and Review)",
    "text": "4.1 Matrix Caculations (Warm up and Review)\nThis is something we’ve learned before. So, go ahead and use the rmd file named lec4_stu.Rmd to use R to represent, calculate the following Math Expressions.\n\n\n4.1.1 Mathematical Expression\nMatrix Creation \\[\nA =\n\\begin{bmatrix}\n    1 & 2 \\\\\n    3 & 4 \\\\\n\\end{bmatrix}\n\\]\nCreate the matrix in two ways:\n\nmatrix(c(), nrow=2)\ngenerate an empty matrix and use a loop to fill in each entry of \\(A\\)\n\n\nMatrix Addition Given two matrices \\(A\\) and \\(B\\), \\[\nC = A + B\n\\]\n\nMatrix Multiplication with Scalar\nGiven scalar \\(k\\) and matrix \\(A\\), \\[\nD = k \\times A\n\\]\n\nMatrix Dot Product Given matrices \\(A\\) and \\(B\\), \\[\nE = A \\cdot B\n\\]\n\nMatrix Transpose Given matrix \\(A\\), \\[\nF = A^T\n\\]\n\nDeterminant and Inverse Given matrix \\(A\\), \\[\n\\text{det}(A)\n\\]\n\nGiven matrix \\(A\\) (and assuming it’s invertible), \\[\nG = A^{-1}\n\\]\n\nEigenvalues and Eigenvectors\nGiven matrix \\(A\\), Eigenvalues (\\(\\lambda\\)) and Eigenvectors (\\(v\\)) satisfy: \\[\nA v = \\lambda v\n\\]\n\nDouble Sum with Indexing Let’s consider two matrices, \\(A\\) and \\(B\\), and calculate the double sum:\n\\[\n\\sum_i \\sum_j A_{ij} + B_{ij}\n\\]\n\\(\\sum_i\\) is iterating through rows, \\(\\sum_j\\) is iterating columns. Suppose: \\[\nA =\n\\begin{bmatrix}\n    1 & 2 \\\\\n    3 & 4 \\\\\n\\end{bmatrix}\n\\quad , \\quad B = \\begin{bmatrix}\n    5 & 6 \\\\\n    7 & 8 \\\\\n\\end{bmatrix}\n\\]\nNote: 1)You should get a single value. 2)Do it in a customized function named as double_sum.\n\n\n\n4.1.2 R Code\nMatrix Creation\n\nUsing matrix()\n\n\n\nCode\nA &lt;- matrix(c(1, 3, 2, 4), nrow=2)\nprint(A)\n\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\n\n\nUsing an empty matrix and a loop\n\nTo do this, we first create an empty 2x2 matrix and then use nested loops to assign values to its entries.\n\n\nCode\nA_method2 &lt;- matrix(0, nrow=2, ncol=2)  # Create an empty 2x2 matrix\n\nvalues &lt;- c(1, 2, 3, 4)  # Values to be filled into the matrix\nindex &lt;- 1\n\nfor (i in 1:nrow(A_method2)) {\n  for (j in 1:ncol(A_method2)) {\n    A_method2[i, j] &lt;- values[index]\n    index &lt;- index + 1\n  }\n}\n\nprint(A_method2)\n\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\n\nBoth methods will yield the same matrix \\(A\\).\nMatrix Addition\n\n\nCode\nB &lt;- matrix(c(2, 3, 0, 1), nrow=2, byrow=TRUE)\nC &lt;- A + B\nprint(C)\n\n\n     [,1] [,2]\n[1,]    3    5\n[2,]    3    5\n\n\nMatrix Multiplication with Scalar\n\n\nCode\nk &lt;- 2\nD &lt;- k * A\nprint(D)\n\n\n     [,1] [,2]\n[1,]    2    4\n[2,]    6    8\n\n\nMatrix Dot Product\n\n\nCode\nE &lt;- A %*% B\nprint(E)\n\n\n     [,1] [,2]\n[1,]    2    5\n[2,]    6   13\n\n\nMatrix Transpose\n\n\nCode\nF &lt;- t(A)\nprint(F)\n\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n\nDeterminants and Inverse\n\n\nCode\ndet_val &lt;- det(A)\nprint(det_val)\n\n\n[1] -2\n\n\nCode\nG &lt;- solve(A)\nprint(G)\n\n\n     [,1] [,2]\n[1,] -2.0  1.0\n[2,]  1.5 -0.5\n\n\nEigenvalues and Eigenvectors\n\n\nCode\neigen_decomp &lt;- eigen(A)\neigen_values &lt;- eigen_decomp$values\neigen_vectors &lt;- eigen_decomp$vectors\nprint(eigen_values)\n\n\n[1]  5.3722813 -0.3722813\n\n\nCode\nprint(eigen_vectors)\n\n\n           [,1]       [,2]\n[1,] -0.4159736 -0.8245648\n[2,] -0.9093767  0.5657675\n\n\nDouble Sums\n\n\nCode\ndouble_sum &lt;- function(matrix1, matrix2) {\n  \n  # Initialize result\n  result &lt;- 0\n  \n  # Double loop to sum elements\n  for (i in 1:nrow(matrix1)) {\n    for (j in 1:ncol(matrix1)) {\n      result &lt;- result + matrix1[i, j] + matrix2[i, j]\n    }\n  }\n  \n  return(result)\n}\n\n# Sample matrices\nA &lt;- matrix(c(1, 2, 3, 4), nrow=2)\nB &lt;- matrix(c(5, 6, 7, 8), nrow=2)\n\n# Use the function to compute the double sum\ndouble_sum(A, B)\n\n\n[1] 36"
  },
  {
    "objectID": "lec4.html#sampling",
    "href": "lec4.html#sampling",
    "title": "Lecture 4",
    "section": "4.2 Sampling",
    "text": "4.2 Sampling\nIn R, the sample() function allows us to generate random samples. Imagine we have an urn containing 12 distinct colored balls. If we were to draw a ball 10 times, replacing the ball after each draw, we can simulate this process to create a sample.\nSince it is randomly generating the sample for us, how can we keep track on it?\nUse the set.seed() function.\n\n\nCode\nset.seed(123)\n\n# Define the 12 distinct colored balls\ncolors &lt;- c(\"Red\", \"Blue\", \"Green\", \"Yellow\", \"Purple\", \"Orange\", \n           \"Pink\", \"Brown\", \"Black\", \"White\", \"Gray\", \"Cyan\")\n\n# Draw 10 balls with replacement\nsampled_colors &lt;- sample(colors, 10, replace = TRUE)\nsampled_colors\n\n\n [1] \"Green\"  \"Green\"  \"White\"  \"Blue\"   \"Orange\" \"Gray\"   \"Purple\" \"Yellow\"\n [9] \"Orange\" \"Black\" \n\n\n\nTo calculate the probability of drawing any single color from the urn when drawing one ball (without replacement), you can use basic probability principles.\nGiven that there are 12 distinct colored balls in the urn, the probability \\(P\\) of drawing any one specific color (let’s say “Red”) in one draw is:\n\\[\nP(\\text{Red}) = \\frac{\\text{Number of Red balls}}{\\text{Total number of balls}}\n\\]\nIf each color appears only once in the urn, then:\n\\[\nP(\\text{Red}) = \\frac{1}{12}\n\\]\nThis is true for any individual color in the urn, assuming each color is unique and there’s only one ball of each color.\nTo calculate this in R:\n\n\nCode\n# Total number of distinct colored balls\ntotal_balls &lt;- length(colors)\n\n# Probability of drawing one specific color\nprobability_single_color &lt;- 1 / total_balls\nprobability_single_color\n\n\n[1] 0.08333333\n\n\nThis will give you the probability of drawing any single specific color from the urn in one draw."
  },
  {
    "objectID": "lec4.html#replication",
    "href": "lec4.html#replication",
    "title": "Lecture 4",
    "section": "4.3 Replication",
    "text": "4.3 Replication\nThe rep() function in R stands for “replicate.” It is used to replicate the values of vectors or lists.\nHere’s a brief explanation of its functionality:\n\nBasic Replication: If you want to replicate a single value multiple times, you can use rep():\n\n\n\nCode\n  rep(5, times = 3) \n\n\n[1] 5 5 5\n\n\nThis creates a vector with the number 5 repeated three times.\n\nReplicating Vectors: You can also replicate entire vectors:\n\n\n\nCode\n  rep(1:3, times = 2)\n\n\n[1] 1 2 3 1 2 3\n\n\nThis replicates the entire vector 1:3 two times.\n\nDifferent Replications for Each Element: By using the each argument, you can specify how many times each element should be replicated:\n\n\n\nCode\n  rep(1:3, each = 2)\n\n\n[1] 1 1 2 2 3 3\n\n\nThis replicates each element of the vector 1:3 two times.\n\nCombining times and each: You can also combine both times and each for more complex patterns:\n\n\n\nCode\nrep(1:2, times = 2, each = 3)\n\n\n [1] 1 1 1 2 2 2 1 1 1 2 2 2\n\n\nHere, each element of the vector 1:2 is replicated three times, and then the entire pattern is replicated twice.\nIn the context of the urn example, rep() was used to represent the contents of the urn by replicating specific colors according to their quantities. For instance, if the urn had 3 Red balls, 2 Blue balls, and 1 Green ball, we would use rep() to create a vector representing this distribution:\n\n\nCode\nurn_contents &lt;- rep(c(\"Red\", \"Blue\", \"Green\"), times = c(3, 2, 1))\n\n\nThis would produce a vector: Red Red Red Blue Blue Green."
  },
  {
    "objectID": "lec4.html#discrete-random-variables-and-distribution",
    "href": "lec4.html#discrete-random-variables-and-distribution",
    "title": "Lecture 4",
    "section": "4.4 Discrete Random Variables and Distribution",
    "text": "4.4 Discrete Random Variables and Distribution\nIn many cases, you will see \\(X \\sim (,)\\), which is typically used to denote that random variable \\(X\\) follows a certain distribution.\nTo describe a discrete random variable and its distribution, you specify: 1. The set of possible values it can take. 2. The probability associated with each value.\nLet’s illustrate this with two common discrete probability distributions: the Bernoulli distribution and the Binomial distribution.\n\n4.4.1 Bernoulli Distribution:\nA Bernoulli random variable \\(X\\) can take on two values, usually 0 and 1, with probabilities \\(p\\) and \\(1-p\\), respectively. This distribution describes a single experiment with two outcomes, often termed “success” and “failure”.\nNotation: \\(X \\sim \\text{Bernoulli}(p)\\)\n\n\n4.4.2 Binomial Distribution:\nA Binomial random variable \\(X\\) represents the number of successes in \\(n\\) Bernoulli trials. Each trial is independent, and the probability of success remains constant across trials.\nNotation: \\(X \\sim \\text{Binomial}(n, p)\\)\nIn R, you can work with these distributions using functions like dbinom(), pbinom(), qbinom(), and rbinom() for the Binomial distribution, and similar functions for other distributions. For example,\n\n\n4.4.3 Binomial Distribution:\nGenerating a binomial random variable with \\(n = 5\\) and \\(p = 0.5\\):\n\n\nCode\nrbinom(1, size=5, prob=0.5)\n\n\n[1] 1"
  },
  {
    "objectID": "lec4.html#continous-random-variables-and-distribution",
    "href": "lec4.html#continous-random-variables-and-distribution",
    "title": "Lecture 4",
    "section": "4.5 Continous Random Variables and Distribution",
    "text": "4.5 Continous Random Variables and Distribution\nUnlike discrete random variables, which take on a finite or countably infinite number of distinct values, continuous random variables can take on an uncountably infinite number of possible values. This means they can take on any value within a specified range.\nFor a continuous random variable, you specify: 1. The set of possible values it can take, which is usually an interval or union of intervals on the real line. 2. The probability density function (pdf) which provides the likelihood of the variable lying within a particular range.\nLet’s illustrate this with two common continuous probability distributions: the Uniform distribution and the Normal distribution.\n\n4.5.1 Uniform Distribution:\nA continuous random variable \\(X\\) that is uniformly distributed takes on values within a specified range \\([a, b]\\) with equal probability.\nNotation: \\(X \\sim U(a, b)\\)\nProbability Density Function (pdf): \\[\nf(x) = \\begin{cases}\n\\frac{1}{b-a} & \\text{for } a \\leq x \\leq b \\\\\n0 & \\text{otherwise}\n\\end{cases}\n\\]\n\n\n4.5.2 Normal Distribution:\nA normal (or Gaussian) random variable \\(X\\) has a bell-shaped probability density. It is characterized by two parameters: the mean \\(\\mu\\) and the variance \\(\\sigma^2\\).\nNotation: \\(X \\sim N(\\mu, \\sigma^2)\\)\nProbability Density Function (pdf):\n\\[\nf(x) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\exp \\left( -\\frac{(x-\\mu)^2}{2\\sigma^2} \\right)\n\\]\nIn R, you can work with these distributions using functions like dunif(), punif(), qunif(), and runif() for the Uniform distribution, and dnorm(), pnorm(), qnorm(), and rnorm() for the Normal distribution.\n\n\n4.5.3 Example: Normal Distribution\nGenerating a normal random variable with \\(\\mu = 0\\) and \\(\\sigma^2 = 1\\):\n\n\nCode\nrnorm(1, mean=0, sd=1)\n\n\n[1] 1.280555"
  },
  {
    "objectID": "lec4.html#monte-carlo-simulation",
    "href": "lec4.html#monte-carlo-simulation",
    "title": "Lecture 4",
    "section": "4.6 Monte Carlo Simulation",
    "text": "4.6 Monte Carlo Simulation\nMonte Carlo method by approximating the value of \\(\\pi\\) using a simple geometric approach. This is a classic example of Monte Carlo simulation.\nConcept:\nImagine a circle inscribed inside a square. The ratio of their areas is \\(\\frac{\\pi r^2}{(2 r)^2}=\\frac{\\pi}{4}\\). If we randomly throw points into the square, the probability that a point lands inside the circle is \\(\\frac{\\pi}{4}\\) . Therefore, \\(\\pi \\approx 4 \\times\\) (number of points inside the circle) / (total number of points thrown).\nSteps: 1. Randomly generate points inside the square. 2. Determine how many of those points fall inside the circle. 3. Approximate \\(\\pi\\) using the ratio of points inside the circle to the total points."
  },
  {
    "objectID": "lec4.html#r-code-with-loops-and-runif",
    "href": "lec4.html#r-code-with-loops-and-runif",
    "title": "Lecture 4",
    "section": "4.7 R Code with loops and runif():",
    "text": "4.7 R Code with loops and runif():\n\n\nCode\nset.seed(123)  # for reproducibility\n\n# Number of random points\nn_points &lt;- 10000\n\n# Counter for points inside the circle\npoints_inside &lt;- 0\n\n# Loop to generate points and check if they are inside the circle\nfor (i in 1:n_points) {\n  \n  # Generate random x and y coordinates using runif()\n  x &lt;- runif(1, -1, 1)\n  y &lt;- runif(1, -1, 1)\n  \n  # Check if point is inside the circle (x^2 + y^2 &lt;= 1)\n  if (x^2 + y^2 &lt;= 1) {\n    points_inside &lt;- points_inside + 1\n  }\n}\n\n# Approximate pi\napproximated_pi_loop_runif &lt;- 4 * points_inside / n_points\napproximated_pi_loop_runif\n\n\n[1] 3.1416"
  },
  {
    "objectID": "lec4.html#exercise",
    "href": "lec4.html#exercise",
    "title": "Lecture 4",
    "section": "4.8 Exercise",
    "text": "4.8 Exercise\nIn many applications, particularly in simulations or Monte Carlo methods, the parameters of a distribution might not be constants but could be variables themselves. This can be particularly useful when modeling uncertainty in parameters.\n\nQuestion statmentSolutions\n\n\nGenerating Random Variables with Variable Inputs in R\nSuppose we’re modeling the scores of students on a test, and we believe the scores are normally distributed around an average of 80. However, we think that the variability (standard deviation) of scores could itself be a random variable, perhaps based on different teaching methods or study materials used.\nLet’s say the standard deviation follows a discrete distribution where:\n\nThere’s a 50% chance that the standard deviation (reflecting the variability of scores) is 5, which corresponds to the standard teaching method.\nThere’s an equal 50% chance that the standard deviation is 10, representing the new experimental teaching method.\n\nGenerate a sample of student scores using rnorm() with this variable input teaching_methods\nHints and Steps:\n\nSample the teaching method first:\n\nsd could either be 5 or 10. Then your code should have a vector of c(5,10)\nsize of the sample: 1000\nreplacement? YES!\nprobability? (0.5,0.5)\nsave this sample into teaching_methods\n\nUse rnorms to generate scores, and in your rnorm() arguments, try two things:\n\nlet sd = teaching_methods\nlet sd = mean(teaching_methods)\n\nWhat are the difference?\n\n\n\n\n\nCode\nset.seed(123)  # For reproducibility\n\n# Sample the teaching method\nteaching_methods &lt;- sample(c(5, 10), size = 1000, replace = TRUE, prob = c(0.5, 0.5))\n\n# Generate scores using the variable standard deviation\nscores &lt;- rnorm(1000, mean = 80, sd = teaching_methods)\n\n# Display the first few scores\nsummary(scores)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  51.90   75.31   80.21   80.09   84.41  111.84 \n\n\nIn this example, each student’s score is generated using a normal distribution with a mean of 80 but a variable standard deviation based on the teaching method. This introduces an additional layer of randomness and complexity, reflecting the real-world scenario where multiple factors can introduce variability."
  },
  {
    "objectID": "lec4.html#expected-values-variance",
    "href": "lec4.html#expected-values-variance",
    "title": "Lecture 4",
    "section": "4.9 Expected Values, Variance",
    "text": "4.9 Expected Values, Variance\nJust like the results from the Exercise above, once we have a random variable \\(X\\), we can always find the expected values of it \\(E[X]\\) and the variance of it \\(Var[X]\\). How to take those values? For the random variable teaching_methods, we can use mean() and var()\n\n\nCode\nmean(teaching_methods)\n\n\n[1] 7.535\n\n\nCode\nvar(teaching_methods)\n\n\n[1] 6.25503\n\n\nCode\nif (sqrt(var(teaching_methods)) == sd(teaching_methods)) {\n    print(sd(teaching_methods))\n}\n\n\n[1] 2.501006"
  },
  {
    "objectID": "lec4.html#plot-the-distribution-of-random-variable",
    "href": "lec4.html#plot-the-distribution-of-random-variable",
    "title": "Lecture 4",
    "section": "4.10 Plot the distribution of random variable",
    "text": "4.10 Plot the distribution of random variable\n\n\nCode\nhist(teaching_methods, main=\"Histogram of Teaching Methods\", \n     xlab=\"Standard Deviation (Teaching Method)\", ylab=\"Frequency\",\n     col=\"lightblue\", border=\"black\", breaks=2)"
  },
  {
    "objectID": "lec4.html#econometrics-expression",
    "href": "lec4.html#econometrics-expression",
    "title": "Lecture 4: R-Review-2023",
    "section": "5.1 Econometrics Expression :",
    "text": "5.1 Econometrics Expression :\n1. Linear Regression in R\nWe’ll begin with a simple linear regression using R’s built-in dataset mtcars.\nConsider a linear regression model of the mpg (miles per gallon) as a function of wt (weight) and hp (horsepower) using the mtcars dataset.\nThe mathematical equation representing this linear regression model is:\n[ = _0 + _1 + _2 + ]\nWhere: - \\(\\text{mpg}\\) is the dependent variable (miles per gallon). - \\(\\text{wt}\\) is the weight of the car. - \\(\\text{hp}\\) is the horsepower of the car. - \\(\\beta_0\\) is the intercept. - \\(\\beta_1\\) is the coefficient for weight (wt). - \\(\\beta_2\\) is the coefficient for horsepower (hp). - \\(\\epsilon\\) represents the error term, capturing the variability not explained by weight and horsepower.\nTask:\n\nUse R code to run this linear regression model\nsave this model called model\n\n2. Extracting Coefficients and Standard Errors\nOnce you have your regression model, you might want to extract the coefficients and standard errors for further analysis.\nTask:\n\nSave the coefficients from the linear regression, called it coefficients\nFrom the coefficient’s matrix, get the standard error vector: std_errors\n\n3. Matrix Calculations using Loops\nLet’s assume you want to multiply each coefficient with its corresponding standard error.\nTask:\n\nUse numeric() and length() functions to generate an empty vector called result that has the same length with coefficients.\nUsing a for loop to multiply each coefficient with its corresponding standard error and save the multiplied result in result\n(Optional) Create a function coef_times_se that takes a linear model as input and returns the coefficients multiplied by their standard errors.\n\n4. Advanced Matrix Operations\nCompute the dot product of the coefficients and standard errors:\n\nTranspose your coefficients first!\n(Optional) Create a function coef_dot_se that takes a linear model as input and returns the dot product of the coefficients and their standard errors.\n\n5. Custom Functions with Loops for Regression Results\nCreate a function coef_se_square that squares each coefficient and multiplies it by the square of its standard error.\n\nfunction input: model you saved\n\n6. Basic Visualization\n\nScatter plot with regression line:\n\nProduce a scatter plot with wt on the x-axis and mpg on the y-axis.\nColor the points by hp (horsepower) to visualize its effect.\nAdd the regression line to this plot.\n\nDescriptive statistics table:\n\nCreate a table that displays descriptive statistics (mean, median, standard deviation) for mpg, wt, and hp."
  },
  {
    "objectID": "lec4.html#r-code-1",
    "href": "lec4.html#r-code-1",
    "title": "Lecture 4: R-Review-2023",
    "section": "5.2 R code",
    "text": "5.2 R code\n1. Fit Linear Model\n\n\nCode\ndata(mtcars)\nmodel &lt;- lm(mpg ~ wt + hp, data=mtcars)\nsummary(model)\n\n\n\nCall:\nlm(formula = mpg ~ wt + hp, data = mtcars)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-3.941 -1.600 -0.182  1.050  5.854 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 37.22727    1.59879  23.285  &lt; 2e-16 ***\nwt          -3.87783    0.63273  -6.129 1.12e-06 ***\nhp          -0.03177    0.00903  -3.519  0.00145 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.593 on 29 degrees of freedom\nMultiple R-squared:  0.8268,    Adjusted R-squared:  0.8148 \nF-statistic: 69.21 on 2 and 29 DF,  p-value: 9.109e-12\n\n\n2. Extracting Coefficients and Standard Errors\n\n\nCode\ncoefficients &lt;- coef(model)\nstd_errors &lt;- summary(model)$coefficients[, \"Std. Error\"]\n\n\n3. Matrix Calculations using Loops\n\n\nCode\nresult &lt;- numeric(length(coefficients))\n\nfor (i in 1:length(coefficients)) {\n  result[i] &lt;- coefficients[i] * std_errors[i]\n}\n\n\n4. Advanced Matrix Operations\n\n\nCode\ndot_product &lt;- t(coefficients) %*% std_errors\n\n\n5. Custom Functions with Loops for Regression Results\n\n\nCode\ncoef_se_square &lt;- function(model) {\n  coefficients &lt;- coef(model)\n  std_errors &lt;- summary(model)$coefficients[, \"Std. Error\"]\n  \n  result &lt;- numeric(length(coefficients))\n  \n  for (i in 1:length(coefficients)) {\n    result[i] &lt;- (coefficients[i]^2) * (std_errors[i]^2)\n  }\n  \n  return(result)\n}\n\n\n\n6. Visualization\n6.1. & 6.2. Scatter plot with regression line:\n\n\nCode\nlibrary(ggplot2)\n\np &lt;- ggplot(mtcars, aes(x=wt, y=mpg, color=hp)) + \n  geom_point() + \n  geom_smooth(method=\"lm\", se=FALSE, color=\"black\") + \n  theme_minimal() + \n  labs(title=\"Scatter plot of mpg vs wt colored by hp\", \n       color=\"Horsepower (hp)\")\np\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n6.3. Descriptive statistics table:\n\n\nCode\ndesc_stats &lt;- data.frame(\n  Variable = c(\"mpg\", \"wt\", \"hp\"),\n  Mean = c(mean(mtcars$mpg), mean(mtcars$wt), mean(mtcars$hp)),\n  Median = c(median(mtcars$mpg), median(mtcars$wt), median(mtcars$hp)),\n  Std.Dev = c(sd(mtcars$mpg), sd(mtcars$wt), sd(mtcars$hp))\n)\nprint(desc_stats)\n\n\n  Variable      Mean  Median    Std.Dev\n1      mpg  20.09062  19.200  6.0269481\n2       wt   3.21725   3.325  0.9784574\n3       hp 146.68750 123.000 68.5628685"
  },
  {
    "objectID": "lec2.html",
    "href": "lec2.html",
    "title": "Lecture 2",
    "section": "",
    "text": "useful_tools folder is now available on GitHub\nSolution for lecture 1’s project is available: lec1_projsol.R\nAny Questions? Comments? Suggestions?"
  },
  {
    "objectID": "lec2.html#if-statement",
    "href": "lec2.html#if-statement",
    "title": "Lecture 2",
    "section": "4.1 if Statement",
    "text": "4.1 if Statement\n\nUsed to execute a block of code only if a condition is true.\n\n\n\nCode\nx &lt;- 5\nif (x &gt; 3) {\n  print(\"x is greater than 3\")\n}\n\n\n[1] \"x is greater than 3\""
  },
  {
    "objectID": "lec2.html#else-statement",
    "href": "lec2.html#else-statement",
    "title": "Lecture 2",
    "section": "4.2 else Statement",
    "text": "4.2 else Statement\n\nUsed to execute a block of code if the if condition is false.\n\n\n\nCode\nx &lt;- 2\nif (x &gt; 3) {\n  print(\"x is greater than 3\")\n} else {\n  print(\"x is not greater than 3\")\n}\n\n\n[1] \"x is not greater than 3\""
  },
  {
    "objectID": "lec2.html#ifelse-function",
    "href": "lec2.html#ifelse-function",
    "title": "Lecture 2",
    "section": "4.3 ifelse Function",
    "text": "4.3 ifelse Function\n\nVectorized alternative to the if and else statements. Useful when working with vectors.\n\n\n\nCode\nx &lt;- c(1, 2, 3, 4, 5)\nresult &lt;- ifelse(x &gt; 3, \"Greater\", \"Not Greater\")\nprint(result)\n\n\n[1] \"Not Greater\" \"Not Greater\" \"Not Greater\" \"Greater\"     \"Greater\""
  },
  {
    "objectID": "lec2.html#for-loop",
    "href": "lec2.html#for-loop",
    "title": "Lecture 2",
    "section": "4.4 for Loop",
    "text": "4.4 for Loop\n\nIterates over a sequence or vector.\n\n\n\nCode\nfor (i in 1:5) {\n  print(i)\n}\n\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\n\nAdvanced Nested for Loops: Matrix Iteration with Missing Values\n\n\n4.4.1 Example: Populating a 10x10 Matrix with Special Conditions\nLet’s create a \\(10 \\times 10\\) matrix such that:\n\nEach entry \\(M_{ij}\\) is initially given by \\(M_{ij} = i \\times j\\).\nIf \\(i = j\\) (i.e., on the diagonal), the entry is set to NA (missing value).\nIf \\(i + j\\) is even and \\(i \\neq j\\), halve the value of \\(M_{ij}\\).\nIf \\(i + j\\) is odd and \\(i \\neq j\\), square the value of \\(M_{ij}\\).\n\nR Code:\n\n\nCode\n# Initializing a 10x10 matrix with zeros\nM &lt;- matrix(0, nrow=10, ncol=10)\n\n# Using nested for loops to populate the matrix with our conditions\nfor (i in 1:10) {\n  for (j in 1:10) {\n    \n    # Compute the basic product\n    M[i, j] &lt;- i * j\n    \n    # If we're on the diagonal, set the value to NA\n    if (i == j) {\n      M[i, j] &lt;- NA\n    } \n    # If the sum of the row and column index is even (and we're off the diagonal)\n    else if ((i + j) %% 2 == 0) {\n      M[i, j] &lt;- M[i, j] / 2\n    }\n    # If the sum of the row and column index is odd (and we're off the diagonal)\n    else if ((i + j) %% 2 == 1) {\n      M[i, j] &lt;- M[i, j]^2\n    }\n  }\n}\n\n# Printing the matrix\nprint(M)\n\n\n       [,1] [,2]  [,3] [,4]   [,5] [,6]   [,7] [,8]   [,9] [,10]\n [1,]    NA    4   1.5   16    2.5   36    3.5   64    4.5   100\n [2,]   4.0   NA  36.0    4  100.0    6  196.0    8  324.0    10\n [3,]   1.5   36    NA  144    7.5  324   10.5  576   13.5   900\n [4,]  16.0    4 144.0   NA  400.0   12  784.0   16 1296.0    20\n [5,]   2.5  100   7.5  400     NA  900   17.5 1600   22.5  2500\n [6,]  36.0    6 324.0   12  900.0   NA 1764.0   24 2916.0    30\n [7,]   3.5  196  10.5  784   17.5 1764     NA 3136   31.5  4900\n [8,]  64.0    8 576.0   16 1600.0   24 3136.0   NA 5184.0    40\n [9,]   4.5  324  13.5 1296   22.5 2916   31.5 5184     NA  8100\n[10,] 100.0   10 900.0   20 2500.0   30 4900.0   40 8100.0    NA\n\n\n\nThis example introduces:\n\nMatrix Diagonal Manipulation: By setting diagonal elements to NA, we simulate scenarios like missing data in real-world datasets.\nConditional Operations: By halving or squaring based on the sum of indices, we introduce condition-based operations, which are typical in data manipulations.\n\n\n\n4.4.2 while Loop\n\nExecutes as long as a condition remains true.\n\n\n\nCode\ncount &lt;- 1\nwhile (count &lt;= 5) {\n  print(count)\n  count &lt;- count + 1\n}\n\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5"
  },
  {
    "objectID": "lec2.html#repeat-loop",
    "href": "lec2.html#repeat-loop",
    "title": "Lecture 2",
    "section": "4.5 repeat Loop",
    "text": "4.5 repeat Loop\n\nExecutes indefinitely until a break statement is encountered.\n\n\n\nCode\ncount &lt;- 1\nrepeat {\n  print(count)\n  if (count &gt;= 5) {\n    break\n  }\n  count &lt;- count + 1\n}\n\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5"
  },
  {
    "objectID": "lec2.html#loop-control-with-break-and-next",
    "href": "lec2.html#loop-control-with-break-and-next",
    "title": "Lecture 2",
    "section": "4.6 Loop Control with break and next",
    "text": "4.6 Loop Control with break and next\n\nbreak: Exits the loop completely.\nnext: Skips the rest of the current iteration and moves to the next one.\n\n\n\nCode\nfor (i in 1:10) {\n  if (i %% 2 == 0) {\n    next\n  }\n  if (i == 9) {\n    break\n  }\n  print(i)\n}\n\n\n[1] 1\n[1] 3\n[1] 5\n[1] 7"
  },
  {
    "objectID": "lec2.html#exercise-session-deep-dive-into-control-structures-in-r",
    "href": "lec2.html#exercise-session-deep-dive-into-control-structures-in-r",
    "title": "Lecture 2",
    "section": "4.7 Exercise Session: Deep Dive into Control Structures in R",
    "text": "4.7 Exercise Session: Deep Dive into Control Structures in R\n\nQuestionsSolutions\n\n\nQuestion 1: Basic if Condition\nPart (a) - In Class:\nGiven a number \\(x\\), write an R script to check if \\(x\\) is positive. If it is positive, print “Positive”.\nPart (b) - Take Home:\nExtend the script from part (a) to also check for negative numbers and zeros. If \\(x\\) is negative, print “Negative”, and if \\(x\\) is zero, print “Zero”.\n\nQuestion 2: Using ifelse with Vectors\nPart (a) - In Class:\nGiven a vector \\(v = \\text{c}(2, 4, 6, 8, 10)\\), use ifelse to classify each number as “Multiple of 3” or “Not a multiple of 3”.\nPart (b) - Take Home:\nGiven a vector \\(v\\) containing numbers from 1 to 10, use ifelse to label each number as “Prime” or “Not Prime”.\n\nQuestion 3: Basic Loop Operations\nPart (a) - In Class:\nWrite a for loop to print the first five even numbers.\nPart (b) - Take Home:\nUse a while loop to do the same thing, but this time, print the first five odd numbers.\n\nChallenging Exercise: Understanding and Manipulating the Variance-Covariance Matrix\nBackground:\nA variance-covariance matrix provides valuable insights into the relationships between multiple variables in a dataset. By understanding its structure and properties, you can derive important conclusions about the data’s underlying patterns.\nNotations:\n\nLet \\(X\\) be a matrix of data where each column represents a variable, and each row represents an observation.\n\\(n\\) is the number of observations.\n\\(p\\) is the number of variables.\n\\(X_{ij}\\) represents the value of the \\(j^{th}\\) variable in the \\(i^{th}\\) observation.\n\\(\\bar{X}_j\\) represents the mean of the \\(j^{th}\\) variable.\n\nVariance:\nThe variance of the \\(j^{th}\\) variable is:\n\\[\n\\text{Var}(X_j) = \\frac{1}{n-1} \\sum_{i=1}^{n} (X_{ij} - \\bar{X}_j)^2\n\\]\nCovariance:\nThe covariance between the $ j^{th} $ variable and the $ k^{th} $ variable is:\n\\[\n\\text{Cov}(X_j, X_k) = \\frac{1}{n-1} \\sum_{i=1}^{n} (X_{ij} - \\bar{X}_j)(X_{ik} - \\bar{X}_k)\n\\]\nVariance-Covariance Matrix:\nThe variance-covariance matrix \\(\\Sigma\\) for a dataset with \\(p\\) variables is a \\(p \\times p\\) matrix where each element \\(\\Sigma_{jk}\\) is:\n\nThe variance of the \\(j^{th}\\) variable if \\(j = k\\)\nThe covariance between the \\(j^{th}\\) and \\(k^{th}\\) variables if \\(j \\neq k\\)\n\nMathematically, the matrix is represented as:\n\\[\n\\Sigma =\n\\begin{bmatrix}\n\\text{Var}(X_1) & \\text{Cov}(X_1, X_2) & \\dots & \\text{Cov}(X_1, X_p) \\\\\n\\text{Cov}(X_2, X_1) & \\text{Var}(X_2) & \\dots & \\text{Cov}(X_2, X_p) \\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\n\\text{Cov}(X_p, X_1) & \\text{Cov}(X_p, X_2) & \\dots & \\text{Var}(X_p) \\\\\n\\end{bmatrix}\n\\]\nWhere the diagonal elements represent variances of each variable, and off-diagonal elements represent the covariances between different pairs of variables.\nTask:\nGiven the dataframe:\ndf &lt;- data.frame(A = c(1, 4, 7), \n                 B = c(2, 5, 8), \n                 C = c(3, 6, 9))\nPerform the following tasks:\n\nManually compute the variance-covariance matrix for this dataframe, without using cov() function. And then compare your results with the matrix using cov function.\n\n\n\n\nSolution for Question 1: Basic if Condition\nPart (a) - In Class:\nx &lt;- 5  # or any other number\nif (x &gt; 0) {\n  print(\"Positive\")\n}\nPart (b) - Take Home:\nif (x &gt; 0) {\n  print(\"Positive\")\n} else if (x &lt; 0) {\n  print(\"Negative\")\n} else {\n  print(\"Zero\")\n}\n\nSolution for Question 2: Using ifelse with Vectors\nPart (a) - In Class:\nv &lt;- c(2, 4, 6, 8, 10)\nresult &lt;- ifelse(v %% 3 == 0, \"Multiple of 3\", \"Not a multiple of 3\")\nprint(result)\nPart (b) - Take Home:\nv &lt;- 1:10\nis_prime &lt;- function(n) {\n  if (n &lt;= 1) return(FALSE)\n  for (i in 2:sqrt(n)) {\n    if (n %% i == 0) return(FALSE)\n  }\n  return(TRUE)\n}\nresult &lt;- ifelse(sapply(v, is_prime), \"Prime\", \"Not Prime\")\nprint(result)\n\nSolution for Question 3: Basic Loop Operations\nPart (a) - In Class:\nfor (i in 1:5) {\n  print(i * 2)\n}\nPart (b) - Take Home:\n\n\nCode\ncount &lt;- 1\nnumber &lt;- 1\nwhile (count &lt;= 5) {\n  print(number)\n  number &lt;- number + 2\n  count &lt;- count + 1\n}\n\n\n[1] 1\n[1] 3\n[1] 5\n[1] 7\n[1] 9\n\n\n\nSolution for Challanging Question\nGiven the dataframe:\n\n\nCode\ndf &lt;- data.frame(A = c(1, 4, 7), \n                 B = c(2, 5, 8), \n                 C = c(3, 6, 9))\n\n\nPerform the following tasks:\nManually compute the variance-covariance matrix:\n\n\nCode\n# Calculate the mean of each variable\nmean_values &lt;- c(mean(df$A, na.rm=TRUE), mean(df$B, na.rm=TRUE), mean(df$C, na.rm=TRUE))\n\n# Create a matrix to store the variance-covariance matrix\nmyvcov_df &lt;- matrix(0, nrow=3, ncol=3)\n\n# Iterate over each variable\nfor (i in 1:3) {\n  # Extract the mean of the current variable\n  mean_i &lt;- mean_values[i]\n  \n  # Iterate over each other variable\n  for (j in 1:3) {\n    # Extract the mean of the other variable\n    mean_j &lt;- mean_values[j]\n    \n    # Calculate the covariance between the current variable and the other variable\n    cov_ij &lt;- sum((df[[i]] - mean_i) * (df[[j]] - mean_j)) / (length(df[[i]]) - 1)\n\n    # Store the covariance in the variance-covariance matrix\n    myvcov_df[i, j] &lt;- cov_ij\n  }\n}\n\n# Print the variance-covariance matrix\nprint(myvcov_df)\n\n\n     [,1] [,2] [,3]\n[1,]    9    9    9\n[2,]    9    9    9\n[3,]    9    9    9\n\n\nThen, we use with R’s built-in function: cov:\n\n\nCode\n# Calculate the variance of each variable\nvar_a &lt;- var(df$A)\nvar_b &lt;- var(df$B)\nvar_c &lt;- var(df$C)\n\n# Calculate the covariance between each pair of variables\ncov_ab &lt;- cov(df$A, df$B)\ncov_ac &lt;- cov(df$A, df$C)\ncov_bc &lt;- cov(df$B, df$C)\n\n# Create the variance-covariance matrix\nvcov_df &lt;- matrix(c(var_a, cov_ab, cov_ac,\n                     cov_ab, var_b, cov_bc,\n                     cov_ac, cov_bc, var_c), nrow=3, ncol=3)\n\n# Print the variance-covariance matrix\nprint(vcov_df)\n\n\n     [,1] [,2] [,3]\n[1,]    9    9    9\n[2,]    9    9    9\n[3,]    9    9    9\n\n\nCode\n# Or even simpler with one-line code\nprint(cov(df))\n\n\n  A B C\nA 9 9 9\nB 9 9 9\nC 9 9 9"
  },
  {
    "objectID": "lec2.html#built-in-functions",
    "href": "lec2.html#built-in-functions",
    "title": "Lecture 2",
    "section": "5.1 Built-in Functions",
    "text": "5.1 Built-in Functions\nWe’ve been using a lot of built-in functions already. For example: mean(), sum(), print()…\n\n5.1.1 Simple Example:\n\n\nCode\nprint(length(c(1,2,3))) #functions inside of functions\n\n\n[1] 3\n\n\n\n\n5.1.2 Complex Example with visulization:\n\nCreate a sample data frame containing data on students’ names, ages, and scores.\nVisualize the data:\n\nPlot ages (x-axis) against scores (y-axis).\nLabel each point with the student’s name.\n\n\n\n\nCode\n# Create a sample data frame\nstudents &lt;- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"),\n  Age = c(20, 21, 19, 22, 21),\n  Score = c(85, 90, 78, 92, 88)\n)\n\n# Plot ages against scores\nplot(students$Age, students$Score, \n     main=\"Students' Scores vs. Age\", \n     xlab=\"Age\", \n     ylab=\"Score\", \n     pch=19, \n     col=\"blue\",\n     xlim=c(18,23), \n     ylim=c(70,100))\n\n# Label each point with the student's name\ntext(students$Age, students$Score, labels=students$Name, pos=3, cex=0.8, col=\"red\")"
  },
  {
    "objectID": "lec2.html#writing-custom-functions",
    "href": "lec2.html#writing-custom-functions",
    "title": "Lecture 2",
    "section": "5.2 Writing Custom Functions",
    "text": "5.2 Writing Custom Functions\nCustom functions allow users to encapsulate a series of commands into a single command, making code more modular and easier to read.\n\n5.2.1 How to define a custom function?\nThe general format for creating a custom function in R is:\n\n\nCode\nfunction_name &lt;- function(arguments) {\n    # body of the function\n    return(value)  # Optional\n}\n\n\n\nSimple Example:\n\n\nCode\n# Define a function to calculate the square of a number\nsquare &lt;- function(x) {\n    return(x^2)\n}\n\n# Use the function\nsquare(5)  # Expected output: 25\n\n\n[1] 25\n\n\n\n\nComplex Example\n\n\nCode\n# Custom function to process and return results in a data frame\nprocess_scores &lt;- function(ages, names, scores) {\n    if (length(ages) != length(names) || length(names) != length(scores)) {\n        stop(\"All input vectors must have the same length!\")\n    }\n  \n    # Create a data frame from the input vectors\n    data &lt;- data.frame(Name = names, Age = ages, Score = scores)\n  \n    # Calculate the average score\n    average_score &lt;- mean(scores)\n  \n    # Filter data for people with scores above the average\n    above_average &lt;- data[data$Score &gt; average_score, ]\n  \n    return(above_average)\n}\n\n# Example usage\nnames &lt;- c(\"Alice\", \"Bob\", \"Charlie\", \"David\")\nages &lt;- c(24, 30, 27, 22)\nscores &lt;- c(85, 90, 88, 86)\n\nresult &lt;- process_scores(ages, names, scores)\nprint(result)\n\n\n     Name Age Score\n2     Bob  30    90\n3 Charlie  27    88\n\n\n\n\nRecursive Functions: Tribonacci Sequence\nOne classic example that’s a step up from the Fibonacci sequence is the calculation of the factorial of a number using recursion. However, to make it a tad more challenging while still being understandable, let’s create a recursive function to compute the “Tribonacci” sequence.\nThe Tribonacci sequence is similar to Fibonacci, but instead of the sum of the last two numbers to get the next number, it takes the sum of the last three.\nHere’s the sequence for reference: \\[\nT_0 = 0, T_1 = 0, T_2 = 1, T_3 = 1, T_4 = 2, T_5 = 4, T_6 = 7, \\dots\n\\]\nThe function to calculate the \\(n\\)th number in the Tribonacci sequence is:\n\n\nCode\ntribonacci &lt;- function(n) {\n  if (n == 0) {\n    return(0)\n  } else if (n == 1) {\n    return(0)\n  } else if (n == 2) {\n    return(1)\n  } else {\n    return(tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3))\n  }\n}\n\n# Example usage\nn &lt;- 5\ncat(paste(\"The\", n, \"th number in the Tribonacci sequence is:\", tribonacci(n)))\n\n\nThe 5 th number in the Tribonacci sequence is: 4\n\n\nThe tribonacci function works by recursively calling itself to calculate the \\(n-1\\), \\(n-2\\), and \\(n-3\\) values in the sequence until it reaches the base cases where \\(n\\) is 0, 1, or 2."
  },
  {
    "objectID": "lec2.html#the-apply-family-of-functions",
    "href": "lec2.html#the-apply-family-of-functions",
    "title": "Lecture 2",
    "section": "5.3 The Apply Family of Functions",
    "text": "5.3 The Apply Family of Functions\nThe apply family of functions in R provides a way to avoid explicit loops in code, making operations faster and code more concise.\nSee a complete syntax table in Appendix.\n\n5.3.1 lapply()\n\nSimple Example:\n\n\nCode\nnumbers &lt;- list(1:4, 5:8, 9:12)\nlapply(numbers, mean)  # Calculate mean for each list element\n\n\n[[1]]\n[1] 2.5\n\n[[2]]\n[1] 6.5\n\n[[3]]\n[1] 10.5\n\n\n\n\nComplex Example:\n\n\nCode\n# Define a function to calculate mean and standard deviation\nstats &lt;- function(x) {\n    return(list(mean = mean(x), sd = sd(x)))\n}\n\nlapply(numbers, stats)\n\n\n[[1]]\n[[1]]$mean\n[1] 2.5\n\n[[1]]$sd\n[1] 1.290994\n\n\n[[2]]\n[[2]]$mean\n[1] 6.5\n\n[[2]]$sd\n[1] 1.290994\n\n\n[[3]]\n[[3]]$mean\n[1] 10.5\n\n[[3]]$sd\n[1] 1.290994\n\n\n\n\n\n5.3.2 sapply()\n\nSimple Example:\n\n\nCode\nnumbers &lt;- 1:5\nsapply(numbers, function(x) x^2)  # Square each element\n\n\n[1]  1  4  9 16 25\n\n\n\n\nComplex Example:\n\n\nCode\n# Return a matrix with numbers and their squares\nsapply(numbers, function(x) c(original = x, squared = x^2))\n\n\n         [,1] [,2] [,3] [,4] [,5]\noriginal    1    2    3    4    5\nsquared     1    4    9   16   25\n\n\n\n\n\n5.3.3 tapply()\n\nSimple Example:\n\n\nCode\nscores &lt;- c(85, 90, 78, 92, 88)\ngroups &lt;- c(\"A\", \"B\", \"A\", \"B\", \"A\")\ntapply(scores, groups, mean)  # Calculate mean score for each group\n\n\n       A        B \n83.66667 91.00000 \n\n\n\n\nComplex Example:\n\n\nCode\n# Calculate both mean and standard deviation for each group\ntapply(scores, groups, function(x) list(mean = mean(x), sd = sd(x)))\n\n\n$A\n$A$mean\n[1] 83.66667\n\n$A$sd\n[1] 5.131601\n\n\n$B\n$B$mean\n[1] 91\n\n$B$sd\n[1] 1.414214\n\n\n\nNote: There are other functions in the apply family such as mapply(), vapply(), etc. However, the above are some of the most commonly used ones."
  },
  {
    "objectID": "lec2.html#exercise-session-deep-dive-into-functions-in-r",
    "href": "lec2.html#exercise-session-deep-dive-into-functions-in-r",
    "title": "Lecture 2",
    "section": "5.4 Exercise Session: Deep Dive into Functions in R",
    "text": "5.4 Exercise Session: Deep Dive into Functions in R\n\nQuestionsSolutions\n\n\n\nQuestion 1: Built-in Functions\na) In-Class:\nGiven a vector x = c(5, 12, 13, 7, 2, 8), use a built-in function to find the mean of the vector. What is the mean value?\nb) Take Home:\nFor the same vector x, find the median, the minimum value, and the maximum value. Can you also determine the index positions of the minimum and maximum values?\n\nQuestion 2: Customized Functions\na) In-Class:\nWrite a function named area_of_rectangle that takes in the length and breadth of a rectangle as arguments and returns its area. What is the area of a rectangle with length = 5 units and breadth = 3 units?\nb) Take Home:\nModify the above function to also compute the perimeter of the rectangle. The function should now return both the area and perimeter. Use your modified function to find the area and perimeter of a rectangle with length = 6 units and breadth = 4 units.\n\nQuestion 3: Apply Family\na) In-Class:\nGiven a list my_list = list(a = 1:5, b = 6:10, c = 11:15), use an appropriate function from the apply family to find the sum of each vector within the list.\nb) Take Home:\nFor the same list my_list, use a function from the apply family to find the mean of each vector within the list. Then, create a named vector where names are the list element names (a, b, c) and the values are the means you just computed.\n\nQuestion 4: Advanced Custom Function with Recursion (Challenging)\nCreate a custom function named recursive_sum that takes in a numeric vector. The function should:\n\nIf the vector has only one element, return the element.\nIf the vector has more than one element, split the vector into two halves and recursively call recursive_sum on each half. Return the sum of the results of the two halves.\n\nNow, within the analyze_data function:\n\nCompute basic statistics: mean, median, standard deviation, and variance.\nIdentify outliers: values that are more than 1.5 * Interquartile Range (IQR) above the third quartile or below the first quartile.\nUse the recursive_sum function to compute the sum of the numeric vector.\nReturn a list containing the basic statistics, outliers, and the sum computed using recursion.\n\nTest both functions with a vector of your choice.\n\n\na) In-Class:\n\n\nCode\nx = c(5, 12, 13, 7, 2, 8)\nmean_value = mean(x)\nprint(mean_value)\n\n\n[1] 7.833333\n\n\nb) Take Home:\n\n\nCode\nmedian_value = median(x)\nmin_value = min(x)\nmax_value = max(x)\nmin_index = which.min(x)\nmax_index = which.max(x)\n\nprint(paste(\"Median:\", median_value))\n\n\n[1] \"Median: 7.5\"\n\n\nCode\nprint(paste(\"Minimum Value:\", min_value, \"at index\", min_index))\n\n\n[1] \"Minimum Value: 2 at index 5\"\n\n\nCode\nprint(paste(\"Maximum Value:\", max_value, \"at index\", max_index))\n\n\n[1] \"Maximum Value: 13 at index 3\"\n\n\n\nSolution for Question 2: Customized Functions\na) In-Class:\n\n\nCode\narea_of_rectangle &lt;- function(length, breadth) {\n  return(length * breadth)\n}\n\narea = area_of_rectangle(5, 3)\nprint(area)\n\n\n[1] 15\n\n\nb) Take Home:\n\n\nCode\narea_and_perimeter &lt;- function(length, breadth) {\n  area = length * breadth\n  perimeter = 2 * (length + breadth)\n  return(list(Area = area, Perimeter = perimeter))\n}\n\nresult = area_and_perimeter(6, 4)\nprint(result)\n\n\n$Area\n[1] 24\n\n$Perimeter\n[1] 20\n\n\n\nSolution for Question 3: Apply Family\na) In-Class:\n\n\nCode\nmy_list = list(a = 1:5, b = 6:10, c = 11:15)\nsums = lapply(my_list, sum)\nprint(sums)\n\n\n$a\n[1] 15\n\n$b\n[1] 40\n\n$c\n[1] 65\n\n\nb) Take Home:\n\n\nCode\nmeans = sapply(my_list, mean)\nnamed_vector = setNames(means, names(my_list))\nprint(named_vector)\n\n\n a  b  c \n 3  8 13 \n\n\n\nSolution for Question 4: Advanced Custom Function with Recursion\n\n\nCode\nrecursive_sum &lt;- function(vec) {\n  if (length(vec) == 1) {\n    return(vec)\n  } else {\n    mid = length(vec) %/% 2\n    left_half = vec[1:mid]\n    right_half = vec[(mid+1):length(vec)]\n    return(recursive_sum(left_half) + recursive_sum(right_half))\n  }\n}\n\nanalyze_data &lt;- function(vec) {\n  basic_stats = list(\n    Mean = mean(vec),\n    Median = median(vec),\n    StdDev = sd(vec),\n    Variance = var(vec)\n  )\n  \n  Q1 = quantile(vec, 0.25)\n  Q3 = quantile(vec, 0.75)\n  IQR = Q3 - Q1\n  lower_bound = Q1 - 1.5 * IQR\n  upper_bound = Q3 + 1.5 * IQR\n  \n  outliers = vec[vec &lt; lower_bound | vec &gt; upper_bound]\n  \n  sum_recursive = recursive_sum(vec)\n  \n  return(list(Stats = basic_stats, Outliers = outliers, Sum = sum_recursive))\n}\n\n# Test\ntest_vec = c(1,2,3,4,5,6,7,8,9,10,50)\nresult = analyze_data(test_vec)\nprint(result)\n\n\n$Stats\n$Stats$Mean\n[1] 9.545455\n\n$Stats$Median\n[1] 6\n\n$Stats$StdDev\n[1] 13.72125\n\n$Stats$Variance\n[1] 188.2727\n\n\n$Outliers\n[1] 50\n\n$Sum\n[1] 105"
  },
  {
    "objectID": "lec2.html#libraries-and-packages",
    "href": "lec2.html#libraries-and-packages",
    "title": "Lecture 2",
    "section": "6.1 Libraries and Packages",
    "text": "6.1 Libraries and Packages\nIn R, the fundamental units of shareable code are called packages. A package bundles together code, data, documentation, and tests, and they can be shared with others as a single unit. When a package is used in an R script, it provides new functions, data, and documentation.\nWhat is a Package?\n\nA collection of R functions, data, and compiled code in a well-defined format.\nContains a description of what the package does and R to install and load it.\nCan be stored in a public repository like CRAN or in a private repository.\n\n\n\n6.1.1 Installing Packages\n\nFrom CRAN\n\nMost common method.\nCRAN provides a repository of thousands of R packages.\n\n\n\nCode\ninstall.packages(\"name_of_package\")\n\n\n\n\nFrom GitHub\n\nFor packages not yet on CRAN.\nRequires the devtools package.\n\n\n\nCode\n# If not already installed\n# install.packages(\"devtools\")\n\ndevtools::install_github(\"username/name_of_package\")\n\n\n\n\n\n\n6.1.2 Loading Packages\nOnce a package is installed, it must be loaded into the session to be used.\n\n\nCode\nlibrary(name_of_package)\n\n\nNote: library() and require() are two functions to load packages. library() stops if the package is not found, while require() gives a warning and returns FALSE.\n\n\n\n6.1.3 Updating Packages\nPackages are updated frequently. To get the latest version:\n\n\nCode\nupdate.packages()\n\n\n\n\n\n6.1.4 Dependencies\n\nSome packages depend on other packages to work.\nThese are automatically installed when you install the main package.\n\n\n\n\n6.1.5 Detaching Packages\nIf you load several packages, they can mask each other’s functions. To prevent this, you can detach packages.\n\n\nCode\ndetach(\"package:name_of_package\", unload=TRUE)\n\n\n\n\n\n6.1.6 Checking Installed Packages\nTo see a list of all your installed packages:\n\n\nCode\ninstalled.packages()[,\"Package\"]\n\n\n\n\n\n6.1.7 9. Useful Tips\n\nAlways look at the package’s documentation.\nRegularly update your packages.\nBe aware of potential conflicts between packages.\nUse sessionInfo() to get information about the current R session, including loaded packages.\n\n\nNote: Using packages in R is essential for effective data analysis. They provide tools and methods that simplify complex tasks and improve the capability of R. Always remember to check the package documentation and keep them updated."
  },
  {
    "objectID": "lec2.html#data-manipulation-in-base-r",
    "href": "lec2.html#data-manipulation-in-base-r",
    "title": "Lecture 2",
    "section": "6.2 Data Manipulation in Base R",
    "text": "6.2 Data Manipulation in Base R\nThe base R system provides a range of functions for manipulating data. While they may not be as intuitive or concise as some of the other packages, understanding base R data manipulation is foundational.\n\n6.2.1 Subsetting\n\nUsing [, [[, and $ to extract subsets of data.\nLogical indexing for filtering rows or columns.\n\nExample:\n\n\nCode\ndata &lt;- data.frame(Name = c(\"Alice\", \"Bob\", \"Charlie\"), Age = c(25, 30, 29))\nsubset_data &lt;- data[data$Age &gt; 28, ]\n\n\n\n\n6.2.2 Sorting\n\norder(): Returns a permutation which rearranges its first argument into ascending or descending order.\n\nExample:\n\n\nCode\nsorted_data &lt;- data[order(data$Age), ]\n\n\n\n\n6.2.3 Merging and Joining\n\nmerge(): Merges two data frames by common columns or row names.\n\nExample:\n\n\nCode\ndata2 &lt;- data.frame(Name = c(\"Alice\", \"Bob\"), Score = c(85, 90))\nmerged_data &lt;- merge(data, data2, by=\"Name\")"
  },
  {
    "objectID": "lec2.html#tidyverse",
    "href": "lec2.html#tidyverse",
    "title": "Lecture 2",
    "section": "6.3 Tidyverse",
    "text": "6.3 Tidyverse\nThe Tidyverse is a collection of R packages designed for data science. One of its core packages is dplyr, which provides functions for data manipulation.\n\n6.3.1 Basic Verbs\n\nselect(): Choose columns.\nfilter(): Choose rows based on values.\nmutate(): Add or modify columns.\narrange(): Sort the data.\nsummarize(): Collapse data into a summary.\n\n\n\n6.3.2 Piping\n\n%&gt;%: Allows for chaining commands, making code more readable.\n\nExample:\n\n\nCode\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\ndata %&gt;% \n  filter(Age &gt; 28) %&gt;%\n  arrange(Age)\n\n\n     Name Age\n1 Charlie  29\n2     Bob  30\n\n\n\n\n6.3.3 Joins\n\nleft_join(), right_join(), inner_join(), and full_join().\n\nExample:\n\n\nCode\ndata %&gt;% left_join(data2, by = \"Name\")\n\n\n     Name Age Score\n1   Alice  25    85\n2     Bob  30    90\n3 Charlie  29    NA"
  },
  {
    "objectID": "lec2.html#data.table",
    "href": "lec2.html#data.table",
    "title": "Lecture 2",
    "section": "6.4 data.table",
    "text": "6.4 data.table\nThe data.table package provides an enhanced version of data.frame that allows for fast and memory-efficient operations.\n\n6.4.1 Basic Operations\n\nDT[i, j, by]: A simple syntax where i is for row subsetting, j for column operations, and by for grouping.\n\nExample:\n\n\nCode\nlibrary(data.table)\n\n\n\nAttaching package: 'data.table'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    between, first, last\n\n\nCode\nDT &lt;- as.data.table(data)\nDT[Age &gt; 28, .(Name, Age)]\n\n\n      Name Age\n1:     Bob  30\n2: Charlie  29\n\n\n\n\n6.4.2 Joins in data.table\n\nJoins are done using the same [.data.table syntax.\n\nExample:\n\n\nCode\nDT2 &lt;- as.data.table(data2)\nDT[DT2, on = .(Name)]\n\n\n    Name Age Score\n1: Alice  25    85\n2:   Bob  30    90\n\n\n\n\n6.4.3 Set Operations\n\nFunctions like setkey(), setorder(), and others that modify data by reference, making them very fast.\n\nExample:\n\n\nCode\nsetorder(DT, Age)\n\n\n\nNote: While base R provides the foundational understanding of data manipulation, dplyr (from Tidyverse) and data.table offer more concise and, often, faster approaches. Knowing all three methods can be beneficial depending on the context and specific needs of a data manipulation task."
  },
  {
    "objectID": "lec2.html#exercise-session-data-manipulation-in-r",
    "href": "lec2.html#exercise-session-data-manipulation-in-r",
    "title": "Lecture 2",
    "section": "6.5 Exercise Session: Data Manipulation in R",
    "text": "6.5 Exercise Session: Data Manipulation in R\n\n\nQuestionsSolutions\n\n\nQuestion 1: Base R - Data Manipulation\na) In-Class:\nUsing the built-in dataset mtcars, subset the data to only include cars (row.names) that have a miles-per-gallon (mpg) value greater than 25 and display the results.\nb) Take Home:\nFor the same mtcars dataset, sort the cars based on their horsepower (hp) in descending order. How does the sorted dataset look?\n\nQuestion 2: Tidyverse (dplyr) - Data Transformation\na) In-Class:\nLoad the dplyr package and use the filter() function to select rows from the iris dataset where Sepal.Length is greater than 5 and Species is “setosa”.\nb) Take Home:\nUsing the mutate() function, add a new column to the iris dataset called Sepal.Ratio which is the ratio of Sepal.Length to Sepal.Width. Display the first 10 rows of the updated dataset.\n\nQuestion 3: data.table - Fast Data Manipulation\na) In-Class:\nConvert the built-in dataset airquality to a data.table object. Then, filter the rows to only include observations from the month of May (Month == 5).\nb) Take Home:\nGroup the airquality data by Month and calculate the average temperature (Temp) for each month. Which month had the highest average temperature?\n\nQuestion 4: Advanced Manipulation (Challenging)\nUsing the diamonds dataset from the ggplot2 package:\n\nConvert the data to a data.table object.\nFilter the data to only include diamonds with a cut of “Premium” or “Ideal”.\nCreate a new column price_per_carat which is the ratio of price to carat.\nFor each color of diamond, determine the average price_per_carat.\nUsing base R or dplyr, determine which color of diamond, on average, has the highest price per carat.\n\n\n\n\nSolution for Question 1: Base R - Data Manipulation\na) In-Class:\n\n\nCode\nsubset_mtcars &lt;- mtcars[mtcars$mpg &gt; 25, ]\nprint(subset_mtcars)\n\n\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nFiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nFiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n\n\nb) Take Home:\n\n\nCode\nsorted_mtcars &lt;- mtcars[order(-mtcars$hp), ]\nprint(sorted_mtcars)\n\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\n\n\n\nSolution for Question 2: Tidyverse (dplyr) - Data Transformation\na) In-Class:\n\n\nCode\nlibrary(dplyr)\n\nfiltered_iris &lt;- iris %&gt;%\n  filter(Sepal.Length &gt; 5 & Species == \"setosa\")\nprint(filtered_iris)\n\n\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1           5.1         3.5          1.4         0.2  setosa\n2           5.4         3.9          1.7         0.4  setosa\n3           5.4         3.7          1.5         0.2  setosa\n4           5.8         4.0          1.2         0.2  setosa\n5           5.7         4.4          1.5         0.4  setosa\n6           5.4         3.9          1.3         0.4  setosa\n7           5.1         3.5          1.4         0.3  setosa\n8           5.7         3.8          1.7         0.3  setosa\n9           5.1         3.8          1.5         0.3  setosa\n10          5.4         3.4          1.7         0.2  setosa\n11          5.1         3.7          1.5         0.4  setosa\n12          5.1         3.3          1.7         0.5  setosa\n13          5.2         3.5          1.5         0.2  setosa\n14          5.2         3.4          1.4         0.2  setosa\n15          5.4         3.4          1.5         0.4  setosa\n16          5.2         4.1          1.5         0.1  setosa\n17          5.5         4.2          1.4         0.2  setosa\n18          5.5         3.5          1.3         0.2  setosa\n19          5.1         3.4          1.5         0.2  setosa\n20          5.1         3.8          1.9         0.4  setosa\n21          5.1         3.8          1.6         0.2  setosa\n22          5.3         3.7          1.5         0.2  setosa\n\n\nb) Take Home:\n\n\nCode\niris_with_ratio &lt;- iris %&gt;%\n  mutate(Sepal.Ratio = Sepal.Length / Sepal.Width)\nprint(head(iris_with_ratio, 10))\n\n\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species Sepal.Ratio\n1           5.1         3.5          1.4         0.2  setosa    1.457143\n2           4.9         3.0          1.4         0.2  setosa    1.633333\n3           4.7         3.2          1.3         0.2  setosa    1.468750\n4           4.6         3.1          1.5         0.2  setosa    1.483871\n5           5.0         3.6          1.4         0.2  setosa    1.388889\n6           5.4         3.9          1.7         0.4  setosa    1.384615\n7           4.6         3.4          1.4         0.3  setosa    1.352941\n8           5.0         3.4          1.5         0.2  setosa    1.470588\n9           4.4         2.9          1.4         0.2  setosa    1.517241\n10          4.9         3.1          1.5         0.1  setosa    1.580645\n\n\n\nSolution for Question 3: data.table - Fast Data Manipulation\na) In-Class:\n\n\nCode\nlibrary(data.table)\n\nairquality_dt &lt;- as.data.table(airquality)\nmay_data &lt;- airquality_dt[Month == 5]\nprint(may_data)\n\n\n    Ozone Solar.R Wind Temp Month Day\n 1:    41     190  7.4   67     5   1\n 2:    36     118  8.0   72     5   2\n 3:    12     149 12.6   74     5   3\n 4:    18     313 11.5   62     5   4\n 5:    NA      NA 14.3   56     5   5\n 6:    28      NA 14.9   66     5   6\n 7:    23     299  8.6   65     5   7\n 8:    19      99 13.8   59     5   8\n 9:     8      19 20.1   61     5   9\n10:    NA     194  8.6   69     5  10\n11:     7      NA  6.9   74     5  11\n12:    16     256  9.7   69     5  12\n13:    11     290  9.2   66     5  13\n14:    14     274 10.9   68     5  14\n15:    18      65 13.2   58     5  15\n16:    14     334 11.5   64     5  16\n17:    34     307 12.0   66     5  17\n18:     6      78 18.4   57     5  18\n19:    30     322 11.5   68     5  19\n20:    11      44  9.7   62     5  20\n21:     1       8  9.7   59     5  21\n22:    11     320 16.6   73     5  22\n23:     4      25  9.7   61     5  23\n24:    32      92 12.0   61     5  24\n25:    NA      66 16.6   57     5  25\n26:    NA     266 14.9   58     5  26\n27:    NA      NA  8.0   57     5  27\n28:    23      13 12.0   67     5  28\n29:    45     252 14.9   81     5  29\n30:   115     223  5.7   79     5  30\n31:    37     279  7.4   76     5  31\n    Ozone Solar.R Wind Temp Month Day\n\n\nb) Take Home:\n\n\nCode\navg_temp &lt;- airquality_dt[, .(Average_Temp = mean(Temp)), by = Month]\nhighest_temp_month &lt;- avg_temp[which.max(Average_Temp)]\nprint(highest_temp_month)\n\n\n   Month Average_Temp\n1:     8     83.96774\n\n\n\nSolution for Question 4: Advanced Manipulation\n\n\nCode\n# Ensure ggplot2 is available for the diamonds dataset\n# install.packages(\"ggplot2\") \nlibrary(ggplot2)\nlibrary(data.table)\n\n# 1. Convert the data to a data.table object\ndiamonds_dt &lt;- as.data.table(diamonds)\n\n# 2. Filter the data\nfiltered_diamonds &lt;- diamonds_dt[cut %in% c(\"Premium\", \"Ideal\")]\n\n# 3. Create a new column\nfiltered_diamonds[, price_per_carat := price/carat]\n\n# 4. Determine the average price_per_carat for each color\navg_price_per_carat &lt;- filtered_diamonds[, .(Average_Price_Per_Carat = mean(price_per_carat)), by = color]\n\n# 5. Determine which color of diamond has the highest average price per carat\nhighest_avg_price_color &lt;- avg_price_per_carat[which.max(Average_Price_Per_Carat)]\nprint(highest_avg_price_color)\n\n\n   color Average_Price_Per_Carat\n1:     G                4222.609"
  },
  {
    "objectID": "lec2.html#project-overview",
    "href": "lec2.html#project-overview",
    "title": "Lecture 2",
    "section": "7.1 Project Overview",
    "text": "7.1 Project Overview\nIn this project, you will be tasked with analyzing a dataset, implementing custom functions, applying control structures, and performing basic data manipulation to derive insights from the data. The objective is to cement the understanding of the core topics covered in the class."
  },
  {
    "objectID": "lec2.html#dataset-mtcars",
    "href": "lec2.html#dataset-mtcars",
    "title": "Lecture 2",
    "section": "7.2 Dataset: mtcars",
    "text": "7.2 Dataset: mtcars\nThe mtcars dataset is a built-in dataset in R, which comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models)."
  },
  {
    "objectID": "lec2.html#tasks",
    "href": "lec2.html#tasks",
    "title": "Lecture 2",
    "section": "7.3 Tasks",
    "text": "7.3 Tasks\n\n7.3.1 Data Exploration and Cleaning\nObjective: Familiarize yourself with the dataset and ensure it’s clean.\n\nLoad the mtcars dataset and display the first few rows.\n\nCheck for any missing values in the dataset. If there are any, handle them appropriately.\n\n\n\n7.3.2 Custom Function Creation\nObjective: Develop functions that will assist in analyzing the dataset.\n\nCreate a function named describe_data that takes in a column (numeric vector) and returns a list with the mean, median, minimum, and maximum of the column.\nCreate a function named cyl_distribution that takes the mtcars dataset as input and returns the number of cars for each unique value of the cyl column.\n\n\n\n7.3.3 Control Structures\nObjective: Apply control structures to categorize data.\n\nWrite a loop that iterates over each column in mtcars. If the column is numeric, apply the describe_data function and print the results.\nUsing an if-else construct, categorize cars in mtcars based on their mpg values:\n\n\nmpg &gt; 20: “Efficient”\nmpg between 15 and 20: “Moderate”\nmpg &lt; 15: “Inefficient”\n\nStore these categories in a new column in the dataset named efficiency.\n\n\n7.3.4 Data Manipulation\nObjective: Use the base R functions, dplyr (from Tidyverse), and data.table to manipulate the mtcars dataset.\n\nUsing base R, filter out all cars with 4 cylinders (cyl column) and order them based on mpg in descending order.\nUsing dplyr, group the cars by the number of gears (gear column) and calculate the average miles per gallon (mpg) for each group.\nConvert the mtcars dataset into a data.table object and calculate the standard deviation of hp (horsepower) for cars grouped by their efficiency category."
  },
  {
    "objectID": "lec2.html#apply-family-table-sytax-table",
    "href": "lec2.html#apply-family-table-sytax-table",
    "title": "Lecture 2",
    "section": "9.1 Apply Family Table Sytax Table",
    "text": "9.1 Apply Family Table Sytax Table\n\n\n\n\n\n\n\n\nFunction\nDescription\nSyntax\n\n\n\n\nlapply\nApplies a function to each element of a list/vector and returns a list.\nlapply(X, FUN, ...)\n\n\nsapply\nSimilar to lapply but tries to simplify the result (e.g., to a vector).\nsapply(X, FUN, ...)\n\n\nvapply\nSimilar to sapply, but has a specified type of return value for safety.\nvapply(X, FUN, FUN.VALUE, ...)\n\n\napply\nApplies a function to the rows or columns of a matrix.\napply(X, MARGIN, FUN, ...)\n\n\ntapply\nApplies a function to subsets of a vector and returns an array.\ntapply(X, INDEX, FUN, ..., default = NA)\n\n\nmapply\nMultivariate version of lapply. Applies a function in parallel over arguments.\nmapply(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE)\n\n\nrapply\nRecursive version of lapply for nested lists.\nrapply(object, f, classes, how, ...)\n\n\n\nThis table provides a concise overview of the apply family functions’ syntax in R."
  },
  {
    "objectID": "lec3.html",
    "href": "lec3.html",
    "title": "Lecture 3",
    "section": "",
    "text": "Lecture 1’s link is now available on GitHub\nAny Questions? Comments? Suggestions?"
  },
  {
    "objectID": "lec3.html#merge-comparison-with-stata",
    "href": "lec3.html#merge-comparison-with-stata",
    "title": "Lecture 3",
    "section": "5.1 Merge: Comparison with STATA",
    "text": "5.1 Merge: Comparison with STATA\nIn STATA, when merging datasets, you specify the type of merge using:\n\n1:1: One-to-one join: Each observation in the dataset has a unique identifier, and each identifier in one dataset matches to one and only one identifier in the other dataset.\n1:m: One-to-many join: You start with the “many” dataset. For each unique identifier in the “many” dataset, there’s a corresponding single observation in the “one” dataset. When you perform the merge, each of the multiple observations in the “many” dataset with the same identifier gets matched to a single observation in the “one” dataset.\nm:1: Many-to-one join: You start with the “one” dataset. For each unique identifier in the “one” dataset, there are multiple corresponding observations in the “many” dataset. When you perform the merge, the single observation in the “one” dataset gets matched to each of the multiple observations in the “many” dataset with the same identifier.\n\n\nLet’s use examples to understand the link and difference between merging datasets in R and STATA. We will see two cases: 1) all keys can be matched and 2) some keys cannot be matched:\n\nDemo with R and save the temporary data into a .dta file using the haven library.\nUse STATA commands and see if the output matches our expectations.\n\n\n\n5.1.1 Every Key Exist in Both Data Set\nAll three should be the same.\n\n\nR Demo using base\nSince we need to save datasets, we need to define the working directory and libraries we are going to use as usual.\n\n\nCode\nsetwd(\"~/Library/CloudStorage/Box-Box/Teaching/R_2023/local/lec3\")\n\nlibrary(haven)\n\n\nOne-to-One (1:1) Merge:\n\n\nCode\ndf1 &lt;- data.frame(ID = c(1, 2, 3), Name = c(\"Alice\", \"Bob\", \"Charlie\"))\ndf2 &lt;- data.frame(ID = c(1, 2, 3), Age = c(25, 30, 28))\n\nwrite_dta(df1, \"df1.dta\")\nwrite_dta(df2, \"df2.dta\")\n\nmerged_df &lt;- merge(df1, df2, by = \"ID\")\nwrite_dta(merged_df, \"one_to_one_merge.dta\")\n\n\nMany-to-One (m:1) Merge:\n\n\nCode\nmany_df &lt;- data.frame(ID = c(1, 1, 2, 3), Score = c(85, 90, 88, 92))\none_df &lt;- data.frame(ID = c(1, 2, 3), Name = c(\"Alice\", \"Bob\", \"Charlie\"))\n\nwrite_dta(many_df, \"many_df.dta\")\nwrite_dta(one_df, \"one_df.dta\")\n\nmerged_df &lt;- merge(many_df, one_df, by = \"ID\")\nwrite_dta(merged_df, \"many_to_one_merge_R.dta\")\n\n\nOne-to-Many (1:m) Merge:\n(Using the same example datasets as for the m:1 merge)\n\n\nCode\nmerged_df &lt;- merge(one_df, many_df, by = \"ID\")\nwrite_dta(merged_df, \"one_to_many_merge_R.dta\")\n\n\n\nSTATA Demo\nWe should expect the perfect match.\n\nR Demo with dplyr: left_join and right_join\nFor this case, the results should be the same. Because both many_df and one_df are having information for all IDs. Let us double-check if we are using left_join, right_join in R.\nFirst, we’ll create two data frames: teachers (the “one” dataset) and classes (the “many” dataset). Then, we’ll perform both m:1 and 1:m merges using both left and right joins, and show the results.\nHere’s the R code:\n\n\nCode\n# Load the required library\nlibrary(dplyr)\n\n# Create the 'teachers' dataframe (the \"one\" dataset)\nteachers &lt;- data.frame(\n  TeacherID = c(1, 2),\n  TeacherName = c(\"Mr. Smith\", \"Mrs. Jones\")\n)\n\n# Create the 'classes' dataframe (the \"many\" dataset)\nclasses &lt;- data.frame(\n  ClassID = c(\"A\", \"B\", \"C\"),\n  ClassName = c(\"Math\", \"Science\", \"English\"),\n  TeacherID = c(1, 1, 2)\n)\n\n# m:1 Merge using left join (starting with 'classes' as the base)\nm1_merge_left &lt;- left_join(classes, teachers, by = \"TeacherID\")\n\n# 1:m Merge using left join (starting with 'teachers' as the base)\n# This produces the same result as the m:1 merge but potentially with reordered columns\none_m_merge_left &lt;- left_join(teachers, classes, by = \"TeacherID\")\n\n# m:1 Merge using right join (starting with 'classes' as the base)\nm1_merge_right &lt;- right_join(classes, teachers, by = \"TeacherID\")\n\n# 1:m Merge using right join (starting with 'teachers' as the base)\none_m_merge_right &lt;- right_join(teachers, classes, by = \"TeacherID\")\n\n# Print results\nlist(\n  m1_merge_left = m1_merge_left,\n  one_m_merge_left = one_m_merge_left,\n  m1_merge_right = m1_merge_right,\n  one_m_merge_right = one_m_merge_right\n)\n\n\n$m1_merge_left\n  ClassID ClassName TeacherID TeacherName\n1       A      Math         1   Mr. Smith\n2       B   Science         1   Mr. Smith\n3       C   English         2  Mrs. Jones\n\n$one_m_merge_left\n  TeacherID TeacherName ClassID ClassName\n1         1   Mr. Smith       A      Math\n2         1   Mr. Smith       B   Science\n3         2  Mrs. Jones       C   English\n\n$m1_merge_right\n  ClassID ClassName TeacherID TeacherName\n1       A      Math         1   Mr. Smith\n2       B   Science         1   Mr. Smith\n3       C   English         2  Mrs. Jones\n\n$one_m_merge_right\n  TeacherID TeacherName ClassID ClassName\n1         1   Mr. Smith       A      Math\n2         1   Mr. Smith       B   Science\n3         2  Mrs. Jones       C   English\n\n\nJust like before, everything matched!\n\n\n\n\n5.1.2 Some keys cannot be matched\nNow, let us see the behavior of left_join when there’s no match for a record in either the left or the right table, and we want this being demonstrated using both dplyr and base R.\nLet’s slightly modify our datasets to have unmatched records:\n\nIn the teachers dataframe, let’s add a teacher with TeacherID = 3 named “Mr. Doe” who doesn’t have any associated class.\nIn the classes dataframe, let’s add a class with ClassID = \"D\" named “History” with TeacherID = 4, but there’s no teacher with TeacherID = 4 in the teachers dataframe.\n\nNow, let’s perform the left joins using both dplyr and base R:\n\nUsing dplyr:\n\nPerform left_join using classes as the base.\nPerform left_join using teachers as the base.\n\nUsing base R:\n\nUse merge with all.x = TRUE using classes as the base.\nUse merge with all.x = TRUE using teachers as the base.\n\n\n\nCode\n# Modify the datasets\nteachers_modified &lt;- rbind(teachers, data.frame(TeacherID = 3, TeacherName = \"Mr. Doe\"))\nclasses_modified &lt;- rbind(classes, data.frame(ClassID = \"D\", ClassName = \"History\", TeacherID = 4))\n\n# Using dplyr:\ndplyr_classes_base &lt;- left_join(classes_modified, teachers_modified, by = \"TeacherID\")\ndplyr_teachers_base &lt;- left_join(teachers_modified, classes_modified, by = \"TeacherID\")\n\n# Using base R:\nbase_classes_base &lt;- merge(classes_modified, teachers_modified, by = \"TeacherID\", all.x = TRUE)\nbase_teachers_base &lt;- merge(teachers_modified, classes_modified, by = \"TeacherID\", all.x = TRUE)\n\nlist(\n  dplyr_classes_base = dplyr_classes_base,\n  dplyr_teachers_base = dplyr_teachers_base,\n  base_classes_base = base_classes_base,\n  base_teachers_base = base_teachers_base\n)\n\n\n$dplyr_classes_base\n  ClassID ClassName TeacherID TeacherName\n1       A      Math         1   Mr. Smith\n2       B   Science         1   Mr. Smith\n3       C   English         2  Mrs. Jones\n4       D   History         4        &lt;NA&gt;\n\n$dplyr_teachers_base\n  TeacherID TeacherName ClassID ClassName\n1         1   Mr. Smith       A      Math\n2         1   Mr. Smith       B   Science\n3         2  Mrs. Jones       C   English\n4         3     Mr. Doe    &lt;NA&gt;      &lt;NA&gt;\n\n$base_classes_base\n  TeacherID ClassID ClassName TeacherName\n1         1       A      Math   Mr. Smith\n2         1       B   Science   Mr. Smith\n3         2       C   English  Mrs. Jones\n4         4       D   History        &lt;NA&gt;\n\n$base_teachers_base\n  TeacherID TeacherName ClassID ClassName\n1         1   Mr. Smith       A      Math\n2         1   Mr. Smith       B   Science\n3         2  Mrs. Jones       C   English\n4         3     Mr. Doe    &lt;NA&gt;      &lt;NA&gt;\n\n\nNOTES:\nIn both the dplyr and base R results, we can observe that where there’s no match for a record in the left table, NA values are filled in for columns from the right table. Which should be similar to the m:1 results from STATA’s picture below. (NOT EXACT THE SAME BUT SAME IDEA)"
  },
  {
    "objectID": "lec3.html#reshaping",
    "href": "lec3.html#reshaping",
    "title": "Lecture 3",
    "section": "5.2 Reshaping",
    "text": "5.2 Reshaping\n\n5.2.1 Base R Methods:\nreshape Function:\nBase R provides the reshape function, which can convert data from wide to long format and vice versa.\n\nWide to Long:\n\n\nCode\n  # Sample data\n  data &lt;- data.frame(\n    ID = 1:3,\n    Time1 = c(5, 6, 7),\n    Time2 = c(8, 9, 10)\n  )\n\n  print(data)\n\n\n  ID Time1 Time2\n1  1     5     8\n2  2     6     9\n3  3     7    10\n\n\nCode\n  # Reshaping to long format\n  long_data &lt;- reshape(data, direction = \"long\", varying = list(c(\"Time1\", \"Time2\")), \n                     v.names = \"Value\", idvar = \"ID\", timevar = \"Time\")\n  print(long_data)\n\n\n    ID Time Value\n1.1  1    1     5\n2.1  2    1     6\n3.1  3    1     7\n1.2  1    2     8\n2.2  2    2     9\n3.2  3    2    10\n\n\nLong to Wide:\n\n\nCode\n    # Reshaping to wide format\n    wide_data &lt;- reshape(long_data, direction = \"wide\", v.names = \"Value\", \n                     idvar = \"ID\", timevar = \"Time\")\n    print(wide_data)\n\n\n    ID Value.1 Value.2\n1.1  1       5       8\n2.1  2       6       9\n3.1  3       7      10\n\n\n\n\n\n5.2.2 Using data.table:\nThe data.table library offers an efficient and flexible approach to data reshaping, especially for large datasets.\nMelting (Wide to Long):\n\n\nCode\nlibrary(data.table)\n\n# Convert data frame to data table\nDT &lt;- as.data.table(data)\n\n# Melt to long format\nmelted_data &lt;- melt(DT, id.vars = \"ID\", measure.vars = c(\"Time1\", \"Time2\"), \n                    variable.name = \"Time\", value.name = \"Value\")\nprint(melted_data)\n\n\n   ID  Time Value\n1:  1 Time1     5\n2:  2 Time1     6\n3:  3 Time1     7\n4:  1 Time2     8\n5:  2 Time2     9\n6:  3 Time2    10\n\n\nCasting (Long to Wide):\n\n\nCode\n# Cast to wide format\ncasted_data &lt;- dcast(melted_data, ID ~ Time, value.var = \"Value\")\nprint(casted_data)\n\n\n   ID Time1 Time2\n1:  1     5     8\n2:  2     6     9\n3:  3     7    10\n\n\nRemember, the choice between base R and data.table methods often depends on your specific needs. data.table is especially powerful for large datasets due to its efficiency, while base R can be simpler for basic reshaping tasks or for those who are more familiar with its syntax."
  },
  {
    "objectID": "lec3.html#dates",
    "href": "lec3.html#dates",
    "title": "Lecture 3",
    "section": "5.3 Dates",
    "text": "5.3 Dates\n\nDate data can be tricky due to various formats and conventions across the world.\nProper handling is essential for chronological analysis, time series forecasting, and event tracking.\nSys.Date(): Returns the current date.\nas.Date(): Converts a character string into a Date object.\nformat(): Formats a Date object into a desired character representation.\n\n\nExamples\n\n\nCode\n# Current date\ncurrent_date &lt;- Sys.Date()\nprint(current_date)\n\n\n[1] \"2023-09-07\"\n\n\nCode\n# Convert a string to a date\ndate_str &lt;- \"2023-08-16\"\nconverted_date &lt;- as.Date(date_str)\nprint(converted_date)\n\n\n[1] \"2023-08-16\"\n\n\nCode\n# Format a date\nformatted_date &lt;- format(current_date, format=\"%B %d, %Y\")\nprint(formatted_date)\n\n\n[1] \"September 07, 2023\"\n\n\nCode\n# Define starting and ending dates\nstart_date &lt;- as.Date(\"2023-01-01\")\nend_date &lt;- as.Date(\"2023-01-10\")\n\n# Create a sequence of dates\ndate_seq &lt;- seq(start_date, end_date, by=\"days\")\n\n# Convert the sequence to a data frame\ndate_df &lt;- data.frame(Date = date_seq)\n\n# Print the data frame\nprint(date_df)\n\n\n         Date\n1  2023-01-01\n2  2023-01-02\n3  2023-01-03\n4  2023-01-04\n5  2023-01-05\n6  2023-01-06\n7  2023-01-07\n8  2023-01-08\n9  2023-01-09\n10 2023-01-10"
  },
  {
    "objectID": "lec3.html#strings",
    "href": "lec3.html#strings",
    "title": "Lecture 3",
    "section": "5.4 Strings",
    "text": "5.4 Strings\nText data often contains noise in the form of special characters, inconsistencies in formatting, and more. Properly cleaning and manipulating such data is crucial.\n\nThe stringr package in R offers a host of functions that can aid in this.\ngsub in base R can do a lot similar functions, I will leave that to you for the future study. Some examples have been provided in the Appendix Section.\n\n\n\n5.4.1 Removing Special Characters\n\nSpecial characters can be noise in some analyses.\nRemoving them can simplify text and aid in other text processing tasks.\nstr_replace_all(): Replaces all instances of a pattern in a string.\n\nExamples\n\n\nCode\nlibrary(stringr)\n\ntext &lt;- \"Hello, world! This is a test. #Test123\"\ncleaned_text &lt;- str_replace_all(text, \"[^[:alnum:][:space:]]\", \"\")\nprint(cleaned_text)\n\n\n[1] \"Hello world This is a test Test123\"\n\n\n\n\n5.4.2 String Matching\n\nUseful to detect if a string contains certain patterns or characters.\nstr_detect(): Detects the presence or absence of a pattern in a string.\nstr_which(): Returns the indices of strings that match a pattern.\nstr_match(): Extract matched groups from a string based on a pattern.\n\nExamples\n\n\nCode\n# Detect if a string contains \"world\"\ntext &lt;- c(\"Hello world\", \"Hello R\", \"R is a world of statistics\")\nprint(str_detect(text, \"world\"))\n\n\n[1]  TRUE FALSE  TRUE\n\n\nCode\n# Get indices of strings that contain \"R\"\nprint(str_which(text, \"R\"))\n\n\n[1] 2 3\n\n\nCode\n# Extract matched groups\npattern &lt;- \"(\\\\d{4})-(\\\\d{2})-(\\\\d{2})\"\ndate_str &lt;- \"Today's date is 2023-08-16.\"\nprint(str_match(date_str, pattern))\n\n\n     [,1]         [,2]   [,3] [,4]\n[1,] \"2023-08-16\" \"2023\" \"08\" \"16\"\n\n\n\n\n5.4.3 Case Conversion\n\nTo ensure uniformity in text data.\nstr_to_upper(): Converts strings to upper case.\nstr_to_lower(): Converts strings to lower case.\nstr_to_title(): Converts strings to title case.\n\nExamples\n\n\nCode\ntext &lt;- \"Hello, World!\"\n\nprint(str_to_upper(text))\n\n\n[1] \"HELLO, WORLD!\"\n\n\nCode\nprint(str_to_lower(text))\n\n\n[1] \"hello, world!\"\n\n\nCode\nprint(str_to_title(text))\n\n\n[1] \"Hello, World!\"\n\n\n\n\n5.4.4 Splitting Strings\n\nTo break a string into parts based on a delimiter.\nstr_split(): Splits a string into parts.\n\nExamples\n\n\nCode\ntext &lt;- \"apple,banana,grape\"\nprint(str_split(text, \",\"))\n\n\n[[1]]\n[1] \"apple\"  \"banana\" \"grape\" \n\n\n\n\n5.4.5 Other stringr functions in R with examples\n\nstr_length(): Computes the length of a string.\nstr_c(): Concatenates strings.\nstr_sub(): Extracts or replaces substrings.\n\n\n\nCode\nlibrary(stringr)\n\n# String length\nprint(str_length(\"Hello, world!\"))\n\n\n[1] 13\n\n\nCode\n# Concatenate\nprint(str_c(\"Hello\", \"world\", sep=\", \"))\n\n\n[1] \"Hello, world\"\n\n\nCode\n# Substring\nprint(str_sub(\"Hello, world!\", 1, 5))\n\n\n[1] \"Hello\""
  },
  {
    "objectID": "lec3.html#unique-identifiers-in-r",
    "href": "lec3.html#unique-identifiers-in-r",
    "title": "Lecture 3",
    "section": "5.5 Unique Identifiers in R",
    "text": "5.5 Unique Identifiers in R\n\nA unique identifier (UID) is an identifier that ensures distinctness among all other items.\nUIDs are crucial for indexing, referencing, and joining datasets without confusion.\n\n\n5.5.1 Functions to Identify Unique and Duplicate Values\nunique(): Returns a vector of unique values.\n\n\nCode\nvec &lt;- c(1, 2, 2, 3, 4, 4, 4, 5)\nunique_vals &lt;- unique(vec)\nprint(unique_vals)\n\n\n[1] 1 2 3 4 5\n\n\nduplicated(): Returns a logical vector indicating whether an element is a duplicate.\n\n\nCode\nvec &lt;- c(1, 2, 2, 3, 4, 4, 4, 5)\ndupes &lt;- duplicated(vec)\nprint(dupes)\n\n\n[1] FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE\n\n\ndistinct() from the dplyr package: Used to remove duplicate rows from a data frame or tibble.\n\n\nCode\nlibrary(dplyr)\ndf &lt;- data.frame(name = c(\"Alice\", \"Bob\", \"Alice\", \"Charlie\"), age = c(25, 30, 25, 35))\ndistinct_df &lt;- distinct(df)\nprint(distinct_df)\n\n\n     name age\n1   Alice  25\n2     Bob  30\n3 Charlie  35\n\n\n\n\n5.5.2 Generating Unique Identifiers\nseq_along(): Generate a sequence along an object’s length.\n\n\nCode\nvec &lt;- c(\"apple\", \"banana\", \"cherry\")\nuids &lt;- seq_along(vec)\nprint(uids)\n\n\n[1] 1 2 3\n\n\nmake.unique(): Generates unique strings by appending numbers.\n\n\nCode\nvec &lt;- c(\"apple\", \"apple\", \"banana\")\nunique_vec &lt;- make.unique(vec)\nprint(unique_vec)\n\n\n[1] \"apple\"   \"apple.1\" \"banana\" \n\n\n\n\n5.5.3 Checking for Unique Identifiers with isid()\nThe isid() function checks if a given set of variables uniquely identifies the observations in a dataset. Just like the one we are using in STATA.\n\nYou need to install eeptools package for this.\n\n\n\nCode\nlibrary(eeptools)\ndf &lt;- data.frame(id = c(1, 2, 3, 1), value = c(10, 20, 30, 40))\n# Check if 'id' uniquely identifies the data\nisid(df, \"id\", verbose = TRUE)\n\n\nAre variables a unique ID?\n[1] FALSE\nVariables define this many unique rows:\n[1] 3\nThere are this many total rows in the data:\n[1] 4\n\n\nIn this example, the isid() function would return FALSE because the ‘id’ variable does not uniquely identify each row in the dataset.\n\n\n5.5.4 Considerations\n\nWhen working with large datasets or datasets that will be merged, it’s essential to ensure that the data’s unique identifiers remain consistent.\nAlways check for the uniqueness of identifiers, especially before operations like joining or merging datasets, to prevent unintended duplications or omissions."
  },
  {
    "objectID": "lec3.html#preliminary-checks",
    "href": "lec3.html#preliminary-checks",
    "title": "Lecture 3",
    "section": "6.1 Preliminary Checks",
    "text": "6.1 Preliminary Checks\nBefore diving into any data analysis, it’s essential to understand and clean your data. This involves checking for outliers, handling missing values, and visualizing data distributions.\n\nFor our demonstration, we’ll use the mtcars dataset.\n\n\nCode\n  data(mtcars)\n\n\n\n\n6.1.1 Checking for Outliers\nOutliers can significantly affect regression results. A simple way to check for outliers is by using boxplots.\n\n\nCode\nboxplot(mtcars$mpg, main=\"Boxplot of MPG\", ylab=\"Miles Per Gallon\")\n\n\n\n\n\nPoints outside the “whiskers” of the boxplot could be potential outliers.\n\n\n6.1.2 Handling Missing Values\nData often comes with missing values, and it’s crucial to handle them appropriately.\n\nIdentifying Missing Values\nUse is.na() to identify missing values:\n\n\n\nCode\n    missing_vals &lt;- is.na(mtcars$mpg)\n    sum(missing_vals)\n\n\n[1] 0\n\n\n\nHandling Strategies\n\nRemove rows with missing values: na.omit()\nImpute missing values using mean, median, or a specific strategy.\n\n\n\n\n6.1.3 Data Visualization\nVisualizing your data can help in understanding distributions, relationships, and potential issues.\n\nHistogram: Understand the distribution of a variable.\n\n\n\nCode\n    hist(mtcars$mpg, main=\"Histogram of MPG\", xlab=\"Miles Per Gallon\", col=\"lightblue\")\n\n\n\n\n\n\nCorrelation Plot: Understand relationships between variables.\n\n\n\nCode\npairs(mtcars[, 1:4], main=\"Scatterplot Matrix\")\n\n\n\n\n\n\nDensity Plot: Another way to check the distribution.\n\n\n\nCode\n  ggplot(mtcars, aes(x=mpg)) + \n    geom_density(fill=\"blue\", alpha=0.5) +\n    labs(title=\"Density Plot of MPG\", x=\"Miles Per Gallon\")\n\n\n\n\n\nBy conducting these preliminary checks, you ensure that your data is ready for deeper analysis, and any insights or results derived are more likely to be reliable."
  },
  {
    "objectID": "lec3.html#data-analysis-and-data-visulization-mtcars-example",
    "href": "lec3.html#data-analysis-and-data-visulization-mtcars-example",
    "title": "Lecture 3",
    "section": "6.2 Data Analysis and Data Visulization (mtcars example)",
    "text": "6.2 Data Analysis and Data Visulization (mtcars example)\n\nMake sure you’ve installed the packages: tidyverse, lmtest\nDone the first-round preliminary data check.\n\n\n6.2.1 Loading the Libraries\n\n\nCode\nlibrary(tidyverse)\nlibrary(lmtest)\n\n\n\n\n6.2.2 Running a Simple Regression in R\nA regression allows us to understand relationships between variables. The simplest form is the linear regression, represented as:\n\\[\nY = \\beta_0 + \\beta_1 X + \\epsilon\n\\]\nWhere: - \\(Y\\) is the dependent variable. - \\(X\\) is the independent variable. - \\(\\beta_0\\) is the intercept. - \\(\\beta_1\\) is the slope. - \\(\\epsilon\\) is the error term.\n\n\nCode\nmodel &lt;- lm(mpg ~ wt, data = mtcars)\nsummary(model)\n\n\n\nCall:\nlm(formula = mpg ~ wt, data = mtcars)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-4.5432 -2.3647 -0.1252  1.4096  6.8727 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  37.2851     1.8776  19.858  &lt; 2e-16 ***\nwt           -5.3445     0.5591  -9.559 1.29e-10 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.046 on 30 degrees of freedom\nMultiple R-squared:  0.7528,    Adjusted R-squared:  0.7446 \nF-statistic: 91.38 on 1 and 30 DF,  p-value: 1.294e-10\n\n\nThe summary() function provides a detailed summary of the regression results. Here, we are trying to predict mpg (miles per gallon) using the weight (wt) of the car, using the mtcars dataset.\n\n\n6.2.3 Accessing Regression Results\nWe can save the summary of the model first:\n\n\nCode\nmodel_summary &lt;- summary(model)\n\n\nAnd we can see that it is a list! This is something we’ve already learned.\nFrom this summary object, you can extract:\n\ncoefficients: A matrix where each row represents a predictor (including the intercept) and columns provide details like estimate, standard error, t-value, and p-value.\nsigma: The residual standard error.\nr.squared: The R-squared value.\nadj.r.squared: The adjusted R-squared value.\nfstatistic: The F-statistic value and its degrees of freedom.\n\n\nAccess the Coefficients\n\n\n\nCode\n# Access using summary list\ncoeff_matrix &lt;- model_summary$coefficients\nprint(coeff_matrix)\n\n\n             Estimate Std. Error   t value     Pr(&gt;|t|)\n(Intercept) 37.285126   1.877627 19.857575 8.241799e-19\nwt          -5.344472   0.559101 -9.559044 1.293959e-10\n\n\nCode\n# Directly access using `coefficients` functions for regression objects\nbetas &lt;- coefficients(model) # this will give you only the betas\nprint(betas)\n\n\n(Intercept)          wt \n  37.285126   -5.344472 \n\n\n\nAccess the Standard Errors\n\nThe standard errors of the coefficients can be extracted from the model’s summary object.\n\n\nCode\nstandard_errors &lt;- coeff_matrix[, \"Std. Error\"]\nprint(standard_errors)\n\n\n(Intercept)          wt \n   1.877627    0.559101 \n\n\n\nAccess the t-statistics\n\n\n\nCode\nt_values &lt;- summary(model)$coefficients[, \"t value\"]\nprint(t_values)\n\n\n(Intercept)          wt \n  19.857575   -9.559044 \n\n\n\nAccess the p-values\n\n\n\nCode\np_values &lt;- summary(model)$coefficients[, \"Pr(&gt;|t|)\"]\nprint(p_values)\n\n\n (Intercept)           wt \n8.241799e-19 1.293959e-10"
  },
  {
    "objectID": "lec3.html#show-basic-regression-figures",
    "href": "lec3.html#show-basic-regression-figures",
    "title": "Lecture 3",
    "section": "6.3 4. Show Basic Regression Figures",
    "text": "6.3 4. Show Basic Regression Figures\n\n6.3.1 Scatter Plot with Regression Line\nVisualizing the relationship between the independent and dependent variables can be very insightful.\n\n\nCode\nggplot(mtcars, aes(x=wt, y=mpg)) +\n  geom_point() +\n  geom_smooth(method=\"lm\", col=\"red\") +\n  labs(title=\"Relationship between Car Weight and MPG\", x=\"Weight\", y=\"Miles Per Gallon\")\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n6.3.2 Residuals vs. Fitted Values\nChecking the residuals can help diagnose potential issues with the model.\n\n\nCode\nresiduals &lt;- resid(model)\nfitted_values &lt;- fitted(model)\n\nggplot() +\n  geom_point(aes(x=fitted_values, y=residuals)) +\n  labs(title=\"Residuals vs. Fitted Values\", x=\"Fitted Values\", y=\"Residuals\")"
  },
  {
    "objectID": "lec3.html#introduction-1",
    "href": "lec3.html#introduction-1",
    "title": "Lecture 3",
    "section": "7.1 Introduction",
    "text": "7.1 Introduction\nThis comprehensive project is designed to review the concepts you’ve learned throughout the course. You’ll apply techniques from data cleaning to advanced data analysis. We’ll work with both built-in datasets and an external dataset."
  },
  {
    "objectID": "lec3.html#datasets",
    "href": "lec3.html#datasets",
    "title": "Lecture 3",
    "section": "7.2 Datasets",
    "text": "7.2 Datasets\n\nBuilt-in Dataset: mtcars\nExternal Dataset: “client_data.csv”"
  },
  {
    "objectID": "lec3.html#workflows",
    "href": "lec3.html#workflows",
    "title": "Lecture 3",
    "section": "7.3 Workflows",
    "text": "7.3 Workflows\nCreate a workflow for this project in the following steps:\n\nUnder lec3 folder, create a sub folder lec3_proj\nUnder lec3_proj folder, create two sub folders: code and data\nUnder data folder, create three sub folders: raw, temp, and cleaned\n\nYour directories should look like this:\n\nlec3–&gt;\n\nlec3_proj–&gt;\n\ncode–&gt;\n\nlec3_proj.Rmd\n\ndata–&gt;\n\nraw\ntemp\ncleaned"
  },
  {
    "objectID": "lec3.html#tasks",
    "href": "lec3.html#tasks",
    "title": "Lecture 3",
    "section": "7.4 Tasks",
    "text": "7.4 Tasks\n\nPreparation\n\n\nDownload the lec3_proj.Rmd from GitHub into your code folder\nIt is already setup for you with the questions.\nCode in the code chunk.\nSet up your working directory to the folder ~/lec3/lec3_proj/code/\n\n\nData Exploration and Cleaning:\n\nGenerate an external dataset “client_data.csv” with the following code\n\n\n\n\nCode\nset.seed(123)\n\n# Number of clients\nn_clients &lt;- 200\n\n# 1. Generate 'name' column\nclient_data &lt;- data.frame(name = paste0(\"Client_\", seq(1, n_clients)))\n\n# 2. Generate 'car_bought' column. Initially, just a random sample\nclient_data$car_bought &lt;- sample(rownames(mtcars), n_clients, replace = TRUE)\n\n# 3. Generate 'date_purchased' column\nclient_data$date_purchased &lt;- sample(seq(as.Date('2015/01/01'), as.Date('2022/01/01'), by=\"day\"), n_clients, replace=TRUE)\n\n# 4. Generate 'income' column\nclient_data$income &lt;- runif(n_clients, min=30000, max=150000)\n\n# 5. Ensure richer clients are more likely to buy cars with more horsepower\n# Sort mtcars by horsepower\nsorted_cars &lt;- rownames(mtcars[order(mtcars$hp), ])\n\n# Divide clients into groups and assign cars based on sorted horsepower\nsplit_rows &lt;- ceiling(n_clients / length(sorted_cars))\nclient_data &lt;- client_data[order(-client_data$income), ] # sort by income\nclient_data$car_bought &lt;- rep(sorted_cars, times = split_rows)[1:n_clients]\n\n# Show the transformed client_data\nhead(client_data)\n\n# Write the data to a CSV\nwrite.csv(client_data, \"../data/raw/client_data.csv\", row.names = FALSE)\n\n\n\nLoad the built-in dataset mtcars. - Create a column named ID, which is the same as the rownames.\nIdentify missing values using sum, and is.na() function.\nVisualize and treat any outliers in the mpg column of the mtcars dataset. - Hint: using boxplot() function, and use ?boxplot() to learn the syntax.\n\n\nCombining Datasets:\n\nMerge the datasets using car_ID, and car_bought.\nUse both merge from base and join from dplyr to combine. Discuss the differences.\nNote: the merged dataset should be named as:\nmerged_data_base\nmerged_data_dplyr\n\nData Reshaping:\n\nUse data.table to reshape the merged data set.\nSave the reshaped data set into the temp folder.\nCreate a summary table calculating the mean mpg for each unique value in Car_ID.\n\nData Standardization:\n\nStandardize any date columns in client_data.csv.\nPurchased Date: as.Date()\nClient’s name: get rid of Client_ using str_replace()\n\nUnique Identifier Check:\n\nCheck if the name is a unique identifier using:\nisid()\nlength(unique(DATA$UID))==nrow(DATA)\n\n\n5.5. Save and Use Cleaned Data to Proceed - Save the “merged_data_base” into the cleaned folder, named as: merged_data_base_cleaned.csv\n\nRegression Analysis:\n\nConducting the Regression:\n\nUsing the merged dataset, run a regression predicting mpg from another continuous variable.\n\nmpg ~ wt\n\nVisualize the relationship between the chosen predictor and mpg using a scatter plot.\n\nplot(merged_data_base$wt, merged_data_base$mpg, ...)\nabline()\n\n\nMatrix Operations with Coefficients:\n\nExtract the coefficients from the regression model and store them in a matrix.\n\nnew matrix: matrix()\nextract coefficients: coefficients(model)\n\nCreate a 2x2 identity matrix.\n\nUse this: identity_matrix &lt;- diag(2)\n\nUse matrix multiplication (using %*%) to multiply the identity matrix by the coefficients matrix. The result will be the coefficients themselves.\n\nLoops for Analysis (HARD: Don’t Do it for Now):\n\nWrite a for loop that iterates over the column names of the merged dataset (excluding mpg). In each iteration, run a regression using mpg as the dependent variable and the current column as the independent variable. Store each coefficient in a vector.\nAfter the loop, visualize the coefficients using a bar plot to see the impact of each variable on mpg.\n\nInterpretation:\n\nDiscuss the results. Which variables have the most substantial impact on mpg? Are the results consistent with expectations?\n\n\nControl Structures and Custom Functions:\n\n\nUse a for loop to calculate the mean of each numeric column in the merged dataset. (HARD: Don’t Do it now). Hints:\n\nTo calculate the mean of each numeric column in a dataset:\nInitialization: Start by creating an empty numeric vector to store the mean values.\nLooping: Use a for loop to iterate over each column in the dataset.\nConditional Check: Within the loop, check if the current column is numeric. You can use the is.numeric() function for this.\nCalculation: If the column is numeric, calculate its mean using the mean() function. Make sure to handle any missing values. Append this mean value to your storage vector.\nNaming: After the loop completes, name each element in your storage vector with the corresponding column name.\nOutput: Finally, print the named vector to display the mean values.\n\nWrite a custom function that uses ifelse to categorize mpg into “Low”, “Medium”, “High”. Apply this function to the dataset.\n\nHint: ifelse(..., ifelse(,...))\n\nUse a while loop to find the first row in the merged dataset where mpg is above a certain threshold (e.g., 25).\n\n\nThe apply Family:\n\nUse lapply to calculate the range of each numeric column in the merged dataset. (HARD, don’t do it now)\nhint: range_function &lt;- function(x) c(min=min(x, na.rm=TRUE), max=max(x, na.rm=TRUE))\nUse sapply to get the type of each column in the dataset.\nhint: sapply(data, class)\n\nAdvanced Data Manipulation:\n\nUse tidyverse functions to filter rows, select columns, and arrange the dataset.\nfilter: mpg &gt; 20\nselect: mpg, wt, gear\narrange: desc(wt)\nUse data.table to efficiently modify the dataset in place."
  },
  {
    "objectID": "lec3.html#challenging-question",
    "href": "lec3.html#challenging-question",
    "title": "Lecture 3",
    "section": "7.5 Challenging Question",
    "text": "7.5 Challenging Question\n\nIntegrative Analysis:\n\n\nCreate a new column in the merged dataset that calculates the age of the car (assumes everyone bought a new car on the purchase_date). Use any necessary libraries/packages.\nWrite a custom function that, given a column name, returns a list containing the mean, median, and standard deviation. Apply this to multiple columns using the sapply function.\nUse control structures to find the average mpg for cars that are above and below the median weight. Compare the results and provide an interpretation."
  },
  {
    "objectID": "lec3.html#gsub",
    "href": "lec3.html#gsub",
    "title": "Lecture 3",
    "section": "8.1 gsub",
    "text": "8.1 gsub\nThe gsub() function is part of base R, and it’s a powerful tool for replacing patterns in strings. gsub() stands for “global substitution”. It searches for all matches of a pattern in a string and replaces them with a specified replacement string.\n\n8.1.1 Syntax\n\n\nCode\ngsub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)\n\n\n\npattern: The pattern to search for.\nreplacement: The string to replace the pattern with.\nx: The input string.\nignore.case: Should the match be case-insensitive?\nperl: Should Perl-compatible regex be used?\nfixed: If TRUE, pattern is a string to be matched as is (turns off special characters).\nuseBytes: Should bytes be used for matching (relevant for non-ASCII strings)?\n\n\n\n8.1.2 Examples\n\nBasic Substitution Replacing “cat” with “dog”:\n\n\n\nCode\ntext &lt;- \"The cat sat on the mat.\"\nnew_text &lt;- gsub(\"cat\", \"dog\", text)\nprint(new_text)\n\n\n[1] \"The dog sat on the mat.\"\n\n\n\nRemoving Special Characters Here’s an example using gsub() to remove special characters:\n\n\n\nCode\ntext &lt;- \"Hello, world! This is a test. #Test123\"\ncleaned_text &lt;- gsub(\"[^[:alnum:][:space:]]\", \"\", text)\nprint(cleaned_text)\n\n\n[1] \"Hello world This is a test Test123\"\n\n\n\nCase-Insensitive Replacement Replacing “world” with “R”, ignoring case:\n\n\n\nCode\ntext &lt;- \"Hello World\"\nnew_text &lt;- gsub(\"world\", \"R\", text, ignore.case = TRUE)\nprint(new_text)\n\n\n[1] \"Hello R\"\n\n\n\nReplace Multiple Spaces with Single Space\n\n\n\nCode\ntext &lt;- \"This   has  multiple    spaces.\"\nnew_text &lt;- gsub(\"\\\\s+\", \" \", text)\nprint(new_text)\n\n\n[1] \"This has multiple spaces.\"\n\n\n\ngsub() is one of the primary string manipulation functions in base R and is often used in scenarios where you don’t want to or can’t rely on external packages."
  },
  {
    "objectID": "lec5.html",
    "href": "lec5.html",
    "title": "Lecture 5",
    "section": "",
    "text": "This is the last class! Thanks for taking this class!\nI will reorganize the materials for this class including a solution for today’s project and send out an email later.\nAny Questions? Comments? Suggestions?"
  },
  {
    "objectID": "lec5.html#introduction-1",
    "href": "lec5.html#introduction-1",
    "title": "Lecture 5",
    "section": "4.1 Introduction",
    "text": "4.1 Introduction\nggplot2 is a powerful and versatile plotting system in R that allows for the creation of complex plots in a structured manner. Today, we’ll explore the basics of ggplot2 and advance to more complex visualizations."
  },
  {
    "objectID": "lec5.html#basic-visualization-with-simulated-data",
    "href": "lec5.html#basic-visualization-with-simulated-data",
    "title": "Lecture 5",
    "section": "4.2 Basic Visualization with Simulated Data",
    "text": "4.2 Basic Visualization with Simulated Data\n\n4.2.1 Visualize Random Vectors\n\nOpen your lec5_stu.R script file\nGenerate 100 random numbers from a standard normal distribution use rnorm(100), assign the value the the vector x; generate another 100 random numbers and assign it to error\n\nRemember to set.seed(ANY NUMBER YOU LIKE) for reproducible before everything\n\nCreate a vector y with this math expression: \\(y=2x+\\epsilon\\)\nUse plot(x), plot(y), plot(error), plot(x,y) and check what you see.\n\n\n\nCode\nset.seed(123) # Setting seed for reproducibility\n\nx &lt;- rnorm(100) # Generate 100 random numbers from a standard normal distribution\ny &lt;- 2*x + rnorm(100) # Linear relationship with some random noise\nerror &lt;- rnorm(100) # Error term\n\n# plot(x)\n# plot(y)\n# plot(error)\nplot(x, y)\n\n\n\n\n\n\nHow to use ggplot2 to do it?\n\nSyntax: ⁠ggplot(data = df, mapping = aes(x, y, other aesthetics))⁠\n\nIn this case, you need to create a data frame first.\nThen, you need to define what layer you need:\n\nFor example, a scatter plot only need geom_point() layer\n\nYou also have the option to choose the theme, use the theme_minimal() for now\n\n\n\n\nCode\nlibrary(ggplot2)\n\n# Basic scatter plot of x against y\nggplot(data.frame(x=x, y=y), aes(x=x, y=y)) +\n  geom_point() +\n  theme_minimal()\n\n\n\n\n\n\nUnknown Distribution\nWhat if we do not know the distribution and would like to check how each vectors (in the real-world data, it should be variables) is distributed?\n\n\nCode\nggplot(data.frame(x=x), aes(x=x)) +\n  geom_density(color=\"blue\", size=1.2) +\n  theme_minimal() +\n  labs(title=\"Density of x\", x=\"Value of x\", y=\"Density\")\n\n\n\n\n\n\n\n4.2.2 Regression and Visualization\n\n\nCode\n# Fit a linear model\nmodel &lt;- lm(y ~ x)\n\n# Plot the data along with the regression line\nggplot(data.frame(x=x, y=y), aes(x=x, y=y)) +\n  geom_point() +\n  geom_smooth(method=\"lm\", se=FALSE, color=\"blue\") + # Regression line\n  theme_minimal()\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n4.2.3 Exercise\n\nQuestionSolutions\n\n\nQuestion 1 - Plot the density for error - change the color to red, size to 0.5 - Title change to “Density of Error Term” - Label for x-axis: “Value of error terms” - Label for y-axis: “Density”\n\nQuestion 2\n\nPlot the scatter plot for x and error. Are they Independent by eye-browsing?\n\nFor the layers added, try this following code:\n\ngeom_point(aes(color = ifelse(x &gt; 0, \"blue\", \"red\"))) + scale_color_identity() + theme_minimal()\n\n\nQuestion 3\n\nFor the regression analysis visualization, copy and paste the code but only change the following line\ngeom_smooth(method=\"lm\", se=TRUE, color=\"blue\") + # Regression line\n\nWhat did you see?\n\n\n\n\nQuestion 1\n\n\nCode\nggplot(data.frame(x=error), aes(x=error)) +\n  geom_density(color=\"red\", size=0.5) +\n  theme_minimal() +\n  labs(title=\"Density of Error Term\", x=\"Value of error terms\", y=\"Density\")\n\n\n\n\n\nQuestion 2\n\n\nCode\nlibrary(ggplot2)\n\n# Basic scatter plot of x against error\nggplot(data.frame(x=x, y=error), aes(x=x, y=error)) +\n  geom_point(aes(color = ifelse(x &gt; 0, \"blue\", \"red\"))) +\n  scale_color_identity() +\n  theme_minimal()\n\n\n\n\n\n\nQuestion 3\n\n\nCode\n# Fit a linear model\nmodel &lt;- lm(y ~ x)\n\n# Plot the data along with the regression line\nggplot(data.frame(x=x, y=y), aes(x=x, y=y)) +\n  geom_point() +\n  geom_smooth(method=\"lm\", se=TRUE, color=\"blue\") + # Regression line\n  theme_minimal()\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "lec5.html#visualization-with-mtcars-dataset",
    "href": "lec5.html#visualization-with-mtcars-dataset",
    "title": "Lecture 5",
    "section": "4.3 2. Visualization with mtcars Dataset",
    "text": "4.3 2. Visualization with mtcars Dataset\n\n4.3.1 Basic Histogram\n\n\nCode\n# Histogram of mpg (miles per gallon)\nggplot(mtcars, aes(x=mpg)) +\n  geom_histogram(binwidth=2, fill=\"skyblue\", color=\"black\") +\n  theme_minimal()\n\n\n\n\n\n\n\n4.3.2 Boxplot by Groups\n\n\nCode\n# Boxplot of mpg by number of gears\nggplot(mtcars, aes(x=as.factor(gear), y=mpg)) +\n  geom_boxplot() +\n  theme_minimal()\n\n\n\n\n\n\n\n4.3.3 Faceted Plot\n\n\nCode\n# Scatter plot of mpg vs. wt, faceted by number of gears\nggplot(mtcars, aes(x=wt, y=mpg)) +\n  geom_point(aes(color=as.factor(gear))) +\n  facet_wrap(~gear) +\n  theme_minimal()"
  },
  {
    "objectID": "lec5.html#exercise-session-data-visualization-with-mtcars-dataset-using-ggplot2",
    "href": "lec5.html#exercise-session-data-visualization-with-mtcars-dataset-using-ggplot2",
    "title": "Lecture 5",
    "section": "4.4 Exercise Session: Data Visualization with mtcars Dataset using ggplot2",
    "text": "4.4 Exercise Session: Data Visualization with mtcars Dataset using ggplot2\n\nQuestionsSolutions\n\n\nInstructions: Using the mtcars dataset and the ggplot2 library, complete the following exercises. Ensure each plot has an appropriate title and axis labels. If you are unsure how to do a question, use the help function to read the syntax. ?\n\nQuestion 1. Modified Histogram\nTask: Create a histogram of the hp (Horsepower) variable from the mtcars dataset. - Use a bin width of 10. - Fill the bars with the color “lightgreen” and set the border color to “darkgreen”.\nHint: Use the geom_histogram() function, similar to the histogram of mpg.\n\n2. Boxplot with Modified Aesthetics\nTask: Produce a boxplot of mpg (miles per gallon) against the number of carb (carburetors) in the cars. - Fill the boxes with the color “lightcoral”. - Set the color of the outliers to “darkred”.\nHint: Recall the aes() function within geom_boxplot() to modify outlier aesthetics.\n\n3. Multi-Faceted Scatter Plot\nTask: Create a scatter plot that displays the relationship between drat (Rear axle ratio) and qsec (Quarter mile time). - Facet the plot by cyl (Number of cylinders) in the cars. - Color the points based on vs (Engine shape: 0 = V-shaped, 1 = straight). - Ensure different shapes for points based on vs.\nHint: Use facet_wrap() for faceting and consider the shape aesthetic in geom_point().\n\n\n\n\n1. Modified Histogram\n\n\nCode\nlibrary(ggplot2)\n\n# Histogram of hp (Horsepower)\nggplot(mtcars, aes(x=hp)) +\n  geom_histogram(binwidth=10, fill=\"lightgreen\", color=\"darkgreen\") +\n  theme_minimal() +\n  labs(title=\"Histogram of Horsepower\", x=\"Horsepower (hp)\", y=\"Frequency\")\n\n\n\n\n\nExplanation: The geom_histogram() function is used to create a histogram of the hp column from the mtcars dataset. The fill and color arguments are used to customize the appearance of the histogram bars. The labs() function adds a title and axis labels for clarity.\n\n2. Boxplot with Modified Aesthetics\n\n\nCode\n# Boxplot of mpg by number of carburetors\nggplot(mtcars, aes(x=as.factor(carb), y=mpg)) +\n  geom_boxplot(fill=\"lightcoral\", outlier.color=\"darkred\") +\n  theme_minimal() +\n  labs(title=\"Boxplot of MPG by Number of Carburetors\", x=\"Number of Carburetors\", y=\"Miles per Gallon (mpg)\")\n\n\n\n\n\nExplanation: The geom_boxplot() function is used to create a boxplot of the mpg column against the number of carburetors (carb). The fill argument sets the color of the boxes, and the outlier.color argument changes the color of the outliers. Again, the labs() function is used to provide a title and axis labels.\n\n3. Multi-Faceted Scatter Plot\n\n\nCode\n# Scatter plot of drat vs. qsec, faceted by number of cylinders\nggplot(mtcars, aes(x=drat, y=qsec)) +\n  geom_point(aes(color=as.factor(vs), shape=as.factor(vs))) +\n  facet_wrap(~cyl) +\n  theme_minimal() +\n  labs(title=\"Scatter Plot of Rear Axle Ratio vs. Quarter Mile Time\", \n       x=\"Rear Axle Ratio (drat)\", \n       y=\"Quarter Mile Time (qsec)\")\n\n\n\n\n\nExplanation: The geom_point() function creates a scatter plot of drat against qsec. The points are colored and shaped based on the engine shape (vs). The facet_wrap() function is used to facet the plot by the number of cylinders (cyl). The title and axis labels provide context to the visualization."
  },
  {
    "objectID": "lec5.html#introduction-2",
    "href": "lec5.html#introduction-2",
    "title": "Lecture 5",
    "section": "5.1 Introduction",
    "text": "5.1 Introduction\nFor this project you will need to play with the external data source from the website, and as I introduce you at the begining of the class, this project will ask you to finish some tasks to help you review what we have learned in this week. You should finished this project using the lec5_proj.Rmd file as your workbook. And remind yourself to create your directories in the following format:\n\nlec5–&gt;\n\nlec5_proj–&gt;\n\ncode–&gt;\n\nlec5_proj.Rmd\n\ndata–&gt;\n\nraw\n\nprivateschools2021.xlsx\n\ntemp\ncleaned"
  },
  {
    "objectID": "lec5.html#tasks-and-steps",
    "href": "lec5.html#tasks-and-steps",
    "title": "Lecture 5",
    "section": "5.2 Tasks and Steps",
    "text": "5.2 Tasks and Steps\n\n5.2.1 Workflows Setup\n\nOrganize your directories as I showed above.\nCreate your own lec5_proj.Rmd in the code folder: just copy and paste what I gave you yesterday to here and change the title.\nDownload data sets from this website into folder raw: Only 20-21. Remember that raw folder is a subfolder of data. Scroll down and download the all the Excel files into your raw folder.\n\n\n\n5.2.2 Setup your working directories: setwd()\n\n\n5.2.3 Load Libraries:\n\nlibrary(readxl)\nlibrary(eeptools)\nlibrary(dplyr)\nlibrary(stringr)\n\n\n\n5.2.4 Load Data:\n\nUse this code to load your data:\n\nps2021 &lt;- read_excel(\"../data/raw/privateschools2021.xlsx\", skip = 2)\n\n\n\n\n5.2.5 First-round Data Scaning\n\nHow many observations and variables are there in the data? Use dim(ps2021). In your Rmd file, after the code, answer this question.\nWhat is the unique identifier for this data? Hint: test CDS Code\n\nisid(df, \"id\", verbose = TRUE)\nlength(unique(DATA$UID))==nrow(DATA)\n\n\n\n\n5.2.6 Data Cleaning\n\nUse the library(dplyr) to select the columns we would like to focus on:\n\nCounty, CDS Code, School Name, Zip, School Phone Number, School Classification, Total Enrollment, Full Time Teachers, Part Time Teachers\nYou need to use the select function\n\nUse within() function to Rename columns, add a new column, and delete a column, here is an example on how to use within()\n\n\n\nCode\n# Using within() to rename a column and add a new column\ndata &lt;- within(data, {\n  new_column_name &lt;- old_column_name\n  new_column &lt;- \"New data\"\n  rm(old_column_name)\n})\n\n\n\nSpecifically:\n\nReplace the space in the variables’ name with underscore.\nChange all variables’ name to lowercase.\nUse tolower() to change it into lower case\nUse str_replace_all to replace the space.\n\nTry this code inside your within() if you cannot figure it out: names(df_selected) &lt;- str_replace_all(str_to_lower(names(df_selected)), \" \", \"_\")\n\n\nText Cleaning: get rid of the - in the phone number\nSave the cleaned data into the folder cleaned.\n\n\n\n5.2.7 Data Analysis\n\nHow many unique School Classification are there in the data? use length(unique())\nUse ggplot2 with a histogram to show the Distribution of Schools by Religious Classification.\n\nFirst, you need to goes into school_classification’s column and recategorize the classification by changing every values that is not Non-Religious or Other into Religious\nUse the histogram to show the distribution for those three larger categories.\n\nRun a regression using total_enrollment as the dependent variable with full_time_teachers\nGet the regression results’ coefficient, and use the coefficients to calculate the confidence interval for 95% confidence level (i.e. z* = 1.96). Suppose you are given the formula to calculate the confidence interval as follows:\n\n\\[\\beta \\pm z^* S E_\\beta\\]\n\nUse ggplot2 to show the regression results and the confidence interval."
  },
  {
    "objectID": "lec2.html#solutions-3",
    "href": "lec2.html#solutions-3",
    "title": "Lecture 2",
    "section": "7.4 Solutions",
    "text": "7.4 Solutions\nYou can find the solution here."
  },
  {
    "objectID": "lec3.html#solution",
    "href": "lec3.html#solution",
    "title": "Lecture 3",
    "section": "7.6 Solution",
    "text": "7.6 Solution\nYou can find the solution here."
  },
  {
    "objectID": "lec5.html#solution",
    "href": "lec5.html#solution",
    "title": "Lecture 5",
    "section": "5.3 Solution",
    "text": "5.3 Solution\nYou can find the solution here."
  }
]